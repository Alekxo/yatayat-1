<!DOCTYPE html>
<!-- saved from url=(0035)http://leafletjs.com/reference.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	

	<title>Documentation - Leaflet - a JavaScript library for mobile-friendly maps</title>

	<meta charset="utf-8">

	<meta property="og:title" content="Leaflet — an open-source JavaScript library for interactive maps">
	<meta property="og:description" content="Leaflet is a modern, lightweight open-source JavaScript library for mobile-friendly interactive maps.">
	<meta property="og:image" content="http://leafletjs.com/docs/images/logo.png">

	<meta itemprop="name" content="Leaflet">
	<meta itemprop="description" content="Leaflet — a modern, lightweight open-source JavaScript library for mobile-friendly interactive maps.">
	<meta itemprop="image" content="http://leafletjs.com/docs/images/logo.png">

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	

	<link rel="icon" type="image/png" href="http://leafletjs.com/docs/images/favicon.png">

	<link href="http://leafletjs.com/atom.xml" type="application/atom+xml" rel="alternate" title="Leaflet Dev Blog Atom Feed">

	<!-- Blueprint -->
	<link rel="stylesheet" href="http://leafletjs.com/docs/css/blueprint/screen.css" media="screen, projection">
	<link rel="stylesheet" href="http://leafletjs.com/docs/css/blueprint/print.css" media="print">
	<!--[if lt IE 8]><link rel="stylesheet" href="docs/css/blueprint/ie.css" media="screen, projection"><![endif]-->

	<link rel="stylesheet" href="http://leafletjs.com/docs/css/screen.css" media="screen, projection">

	<script type="application/javascript" async="" defer="" src="https://by.uservoice.com/t/126210/x/p/7PZwpPtmOf3VvPR/track.js?_=1369427257581&s=1&c=__uvSessionData0&d=eyJlIjp7InUiOiJodHRwOi8vbGVhZmxldGpzLmNvbS9yZWZlcmVuY2UuaHRtbCIsInIiOiIifX0%3D"></script><script type="text/javascript" async="" src="./Documentation - Leaflet_files/ygv5CFpu3yBQFTFPOAdFg.js"></script><script type="text/javascript" async="" src="./Documentation - Leaflet_files/ga.js"></script><script id="twitter-wjs" src="http://platform.twitter.com/widgets.js"></script><script src="./Documentation - Leaflet_files/highlight.pack.js"></script>
	<link rel="stylesheet" href="http://leafletjs.com/docs/highlight/styles/github.css">

	<!-- Leaflet -->
	<link rel="stylesheet" href="http://leafletjs.com/dist/leaflet.css">
	<!--[if lte IE 8]><link rel="stylesheet" href="dist/leaflet.ie.css" /><![endif]-->
	<script src="./Documentation - Leaflet_files/leaflet.js"></script>

	

	<script>
		CM_ATTR = 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
				'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
				'Imagery © <a href="http://cloudmade.com">CloudMade</a>';

		CM_URL = 'http://{s}.tile.cloudmade.com/d4fc77ea4a63471cab2423e66626cbb6/{styleId}/256/{z}/{x}/{y}.png';

		OSM_URL = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
		OSM_ATTRIB = '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors';
	</script>
<style type="text/css" media="screen">.uv-tray{position:fixed;-webkit-font-smothing:antialias;z-index:100000}.uv-tray.uv-bottom-right{bottom:10px;right:10px}.uv-tray.uv-top-right{top:10px;right:10px}.uv-tray.uv-bottom-left{bottom:10px;left:10px}.uv-tray.uv-top-left{top:10px;left:10px}.uv-tray-item{background:rgba(46,49,51,0.6);border-radius:24px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:inline-block;color:white;cursor:pointer;font-family:sans-serif;font-size:14px;font-weight:100;-webkit-font-smoothing:antialias;line-height:1;margin-left:4px;padding:0 24px;position:relative;-webkit-transition:all 300ms;-moz-transition:all 300ms;-o-transition:all 300ms;transition:all 300ms;width:48px;height:48px;vertical-align:middle;white-space:nowrap}.uv-ie8 .uv-tray-item{background:url(//widget.uservoice.com/images/clients/widget_environment/sixty_percent.png)}.uv-tray-item-hoverinfo{display:block;opacity:0;-webkit-transition:opacity 100ms;-moz-transition:opacity 100ms;-o-transition:opacity 100ms;transition:opacity 100ms;padding-right:48px;overflow:hidden;line-height:48px}.uv-top-left .uv-tray-item-hoverinfo,.uv-bottom-left .uv-tray-item-hoverinfo{padding-left:24px}.uv-top-right .uv-tray-item-hoverinfo,.uv-bottom-right .uv-tray-item-hoverinfo{padding-left:48px}.uv-tray-item-icon{position:absolute;top:0;opacity:0.8;-webkit-transition:opacity 100ms;-moz-transition:opacity 100ms;-o-transition:opacity 100ms;transition:opacity 100ms}.uv-top-right .uv-tray-item-icon,.uv-bottom-right .uv-tray-item-icon{right:0}.uv-top-left .uv-tray-item-icon,.uv-bottom-left .uv-tray-item-icon{left:0}.uv-tray-item-icon svg{width:48px;height:48px}.uv-init .uv-tray-item{background:rgba(46,49,51,0.9);width:245px}.uv-init .uv-tray-item .uv-tray-item-hoverinfo{opacity:1;-webkit-transition:opacity 400ms;-webkit-transition-delay:100ms;-moz-transition:opacity 400ms 100ms;-o-transition:opacity 400ms 100ms;transition:opacity 400ms 100ms}.uv-init .uv-tray-item .uv-tray-item-icon{opacity:1}.uv-ie8 .uv-init .uv-tray-item{background:url(//widget.uservoice.com/images/clients/widget_environment/ninety_percent.png)}.uv-init.uv-top-right .uv-tray-item-hoverinfo,.uv-init.uv-bottom-right .uv-tray-item-hoverinfo{padding-left:0}.uv-tray-item{background:rgba(46,49,51,0.6);width:48px}.uv-ie8 .uv-tray-item{background:url(//widget.uservoice.com/images/clients/widget_environment/sixty_percent.png)}.uv-tray-item:hover{background:rgba(46,49,51,0.9)}.uv-ie8 .uv-tray-item:hover{background:url(//widget.uservoice.com/images/clients/widget_environment/ninety_percent.png)}.uv-tray-item .uv-tray-item-hoverinfo{opacity:0}.uv-tray-item .uv-tray-item-icon{opacity:1}.uv-tray-item.uv-is-selected{background:rgba(46,49,51,0.75)}.uv-ie8 .uv-tray-item.uv-is-selected{background:url(//widget.uservoice.com/images/clients/widget_environment/seventy_five_percent.png)}.uv-tray-item.uv-is-selected:hover{background:rgba(46,49,51,0.9)}.uv-ie8 .uv-tray-item.uv-is-selected:hover{background:url(//widget.uservoice.com/images/clients/widget_environment/ninety_percent.png)}.uv-popover{position:absolute;color:black;z-index:100001}.uv-top-right .uv-popover{top:54px;right:4px}.uv-top-left .uv-popover{top:54px;left:4px}.uv-bottom-right .uv-popover{bottom:54px;right:4px}.uv-bottom-left .uv-popover{bottom:54px;left:4px}@media screen and (max-device-width: 480px){.uv-popover{position:fixed;bottom:10px;right:10px;left:10px;top:10px}}.uv-popover-content{-webkit-border-radius:3px;-moz-border-radius:3px;-ms-border-radius:3px;-o-border-radius:3px;border-radius:3px;background:#f0f3f7;width:325px;-webkit-transition:background 200ms;-moz-transition:background 200ms;-o-transition:background 200ms;transition:background 200ms}.uv-top-left .uv-popover-content,.uv-top-right .uv-popover-content,.uv-below .uv-popover-content{-webkit-box-shadow:rgba(0,0,0,0.3) 0 -10px 60px,rgba(0,0,0,0.1) 0 0 20px;-moz-box-shadow:rgba(0,0,0,0.3) 0 -10px 60px,rgba(0,0,0,0.1) 0 0 20px;box-shadow:rgba(0,0,0,0.3) 0 -10px 60px,rgba(0,0,0,0.1) 0 0 20px}.uv-bottom-left .uv-popover-content,.uv-bottom-right .uv-popover-content,.uv-above .uv-popover-content{-webkit-box-shadow:rgba(0,0,0,0.3) 0 10px 60px,rgba(0,0,0,0.1) 0 0 20px;-moz-box-shadow:rgba(0,0,0,0.3) 0 10px 60px,rgba(0,0,0,0.1) 0 0 20px;box-shadow:rgba(0,0,0,0.3) 0 10px 60px,rgba(0,0,0,0.1) 0 0 20px}@media screen and (max-device-width: 480px){.uv-popover-content{-webkit-box-shadow:rgba(0,0,0,0.6) 0 10px 60px,rgba(0,0,0,0.2) 0 0 20px;-moz-box-shadow:rgba(0,0,0,0.6) 0 10px 60px,rgba(0,0,0,0.2) 0 0 20px;box-shadow:rgba(0,0,0,0.6) 0 10px 60px,rgba(0,0,0,0.2) 0 0 20px;height:100%;width:100%}}@media only screen and (min-device-width: 768px) and (max-device-width: 1024px){.uv-popover-content{width:380px}}.uv-ie8 .uv-popover-content{position:relative}.uv-ie8 .uv-popover-content .uv-popover-content-shadow{display:block;background:black;content:'';position:absolute;left:-15px;top:-15px;width:100%;height:100%;filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius=15,MakeShadow=true,ShadowOpacity=0.30);z-index:-1}.uv-popover-tail{border:8px solid transparent;width:0;z-index:10;position:relative;-webkit-transition:border-top-color 200ms;-moz-transition:border-top-color 200ms;-o-transition:border-top-color 200ms;transition:border-top-color 200ms}.uv-top-left .uv-popover-tail,.uv-bottom-left .uv-popover-tail{margin-left:12px}.uv-top-right .uv-popover-tail,.uv-bottom-right .uv-popover-tail{margin-left:297px}.uv-bottom-left .uv-popover-tail,.uv-bottom-right .uv-popover-tail,.uv-above .uv-popover-tail{border-bottom:none;border-top:12px solid #f0f3f7}.uv-top-left .uv-popover-tail,.uv-top-right .uv-popover-tail,.uv-below .uv-popover-tail{border-top:none;border-bottom:12px solid #f0f3f7}@media screen and (max-device-width: 480px){.uv-popover-tail{display:none}}@media only screen and (min-device-width: 768px) and (max-device-width: 1024px){.uv-popover-tail{margin-left:350px}}.uv-popover-iframe-container{height:325px}@media screen and (max-device-width: 480px){.uv-popover-iframe-container{height:290px}.uv-popover-controls-hidden .uv-popover-iframe-container{height:auto}}@media only screen and (min-device-width: 768px) and (max-device-width: 1024px){.uv-popover-iframe-container{height:380px}}.uv-popover-iframe{-webkit-border-radius:3px;-moz-border-radius:3px;-ms-border-radius:3px;-o-border-radius:3px;border-radius:3px;overflow:hidden}.uv-popover-controls{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0 10px 3px;text-align:center;-webkit-transition:all 600ms;-webkit-transition-delay:600ms;-moz-transition:all 600ms 600ms;-o-transition:all 600ms 600ms;transition:all 600ms 600ms;height:42px;overflow:hidden}.uv-popover-controls-hidden .uv-popover-controls{opacity:0;height:0;padding:0 10px}.uv-popover-button{display:inline-block;border-top:1px solid #c8dbef;font-size:13px;line-height:1;padding:13px 18px;color:#297bcc;font-weight:500;margin:0 5px}.uv-popover-button:focus{outline:none}.uv-popover-button:hover{border-top:1px solid #a0c1e4;color:#314f70}.uv-reversed .uv-popover-button{-webkit-transition:all 200ms;-moz-transition:all 200ms;-o-transition:all 200ms;transition:all 200ms;color:white !important;border-top-color:white !important}.uv-bubble{position:absolute;text-align:center;z-index:100002}.uv-top-right .uv-bubble,.uv-top-left .uv-bubble{top:48px;padding-top:12px}.uv-bottom-right .uv-bubble,.uv-bottom-left .uv-bubble{bottom:48px;padding-bottom:12px}.uv-bubble-content{font-family:sans-serif;font-size:13px;line-height:28px;background:rgba(46,49,51,0.9);-webkit-border-radius:14px;-moz-border-radius:14px;-ms-border-radius:14px;-o-border-radius:14px;border-radius:14px;padding:0 10px;text-align:left}.uv-ie8 .uv-bubble-content{background:url(//widget.uservoice.com/images/clients/widget_environment/ninety_percent.png)}.uv-bubble-dismiss{display:inline-block;opacity:0.5;width:28px;-webkit-transition:all 200ms;-moz-transition:all 200ms;-o-transition:all 200ms;transition:all 200ms;text-align:center;margin:0 -10px 0 -6px}.uv-bubble-dismiss:hover{opacity:1;-webkit-transform:rotateZ(90deg);-moz-transform:rotateZ(90deg);-ms-transform:rotateZ(90deg);-o-transform:rotateZ(90deg);transform:rotateZ(90deg)}.uv-bubble-tail{border:6px solid transparent;position:absolute;margin:0 auto;width:0}.uv-bottom-left .uv-bubble-tail,.uv-bottom-right .uv-bubble-tail{border-top:8px solid rgba(46,49,51,0.9);border-bottom:none}.uv-top-left .uv-bubble-tail,.uv-top-right .uv-bubble-tail{border-bottom:8px solid rgba(46,49,51,0.9);border-top:none;top:4px}.uv-ie8 .uv-bubble-tail{border:none;background:url(//widget.uservoice.com/images/clients/widget_environment/bubble_tail.png);width:12px;height:8px}.uv-ie8.uv-top-left .uv-bubble-tail,.uv-ie8.uv-top-right .uv-bubble-tail{background:url(//widget.uservoice.com/images/clients/widget_environment/bubble_tail_up.png)}.uv-is-hidden{display:none}.uv-is-invisible{display:block !important;visibility:hidden !important}.uv-is-transitioning{display:block !important}.uv-no-transition{-moz-transition:none !important;-webkit-transition:none !important;-o-transition:color 0 ease-in !important;transition:none !important}.uv-fade{opacity:1;-webkit-transition:opacity 200ms ease-out;-moz-transition:opacity 200ms ease-out;-o-transition:opacity 200ms ease-out;transition:opacity 200ms ease-out}.uv-fade.uv-is-hidden{opacity:0}.uv-scale-top{opacity:1;-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-top.uv-is-hidden{opacity:0;-webkit-transform:scale(0.8) translateY(-15%);-moz-transform:scale(0.8) translateY(-15%);-ms-transform:scale(0.8) translateY(-15%);-o-transform:scale(0.8) translateY(-15%);transform:scale(0.8) translateY(-15%)}.uv-scale-top-left{opacity:1;-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-top-left.uv-is-hidden{opacity:0;-webkit-transform:scale(0.8) translateY(-15%) translateX(-10%);-moz-transform:scale(0.8) translateY(-15%) translateX(-10%);-ms-transform:scale(0.8) translateY(-15%) translateX(-10%);-o-transform:scale(0.8) translateY(-15%) translateX(-10%);transform:scale(0.8) translateY(-15%) translateX(-10%)}.uv-scale-top-right{opacity:1;-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-top-right.uv-is-hidden{opacity:0;-webkit-transform:scale(0.8) translateY(-15%) translateX(10%);-moz-transform:scale(0.8) translateY(-15%) translateX(10%);-ms-transform:scale(0.8) translateY(-15%) translateX(10%);-o-transform:scale(0.8) translateY(-15%) translateX(10%);transform:scale(0.8) translateY(-15%) translateX(10%)}.uv-scale-bottom{opacity:1;-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-bottom.uv-is-hidden{opacity:0;-webkit-transform:scale(0.8) translateY(15%);-moz-transform:scale(0.8) translateY(15%);-ms-transform:scale(0.8) translateY(15%);-o-transform:scale(0.8) translateY(15%);transform:scale(0.8) translateY(15%)}.uv-scale-bottom-left{opacity:1;-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-bottom-left.uv-is-hidden{opacity:0;-webkit-transform:scale(0.8) translateY(15%) translateX(-10%);-moz-transform:scale(0.8) translateY(15%) translateX(-10%);-ms-transform:scale(0.8) translateY(15%) translateX(-10%);-o-transform:scale(0.8) translateY(15%) translateX(-10%);transform:scale(0.8) translateY(15%) translateX(-10%)}.uv-scale-bottom-right{opacity:1;-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-scale-bottom-right.uv-is-hidden{opacity:0;-webkit-transform:scale(0.8) translateY(15%) translateX(10%);-moz-transform:scale(0.8) translateY(15%) translateX(10%);-ms-transform:scale(0.8) translateY(15%) translateX(10%);-o-transform:scale(0.8) translateY(15%) translateX(10%);transform:scale(0.8) translateY(15%) translateX(10%)}.uv-slide-top{-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-slide-top.uv-is-hidden{-webkit-transform:translateY(-100%);-moz-transform:translateY(-100%);-ms-transform:translateY(-100%);-o-transform:translateY(-100%);transform:translateY(-100%)}.uv-slide-bottom{-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-slide-bottom.uv-is-hidden{-webkit-transform:translateY(100%);-moz-transform:translateY(100%);-ms-transform:translateY(100%);-o-transform:translateY(100%);transform:translateY(100%)}.uv-slide-left{-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-slide-left.uv-is-hidden{-webkit-transform:translateX(-100%);-moz-transform:translateX(-100%);-ms-transform:translateX(-100%);-o-transform:translateX(-100%);transform:translateX(-100%)}.uv-slide-right{-webkit-transition:all 80ms ease-out;-moz-transition:all 80ms ease-out;-o-transition:all 80ms ease-out;transition:all 80ms ease-out}.uv-slide-right.uv-is-hidden{-webkit-transform:translateX(100%);-moz-transform:translateX(100%);-ms-transform:translateX(100%);-o-transform:translateX(100%);transform:translateX(100%)}
</style><style type="text/css" media="print">#uvTab {display:none !important;}</style></head>
<body class="api-page"><div id="uvTab" style="background:red url(http://widget.uservoice.com/images/clients/widget2/tab-horizontal-light.png) 0 50% no-repeat;border:1px solid #FFF;border-bottom:none;-moz-border-radius:4px 4px 0 0;-webkit-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0;-moz-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;-webkit-box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;box-shadow:inset rgba(255,255,255,.25) 1px 1px 1px, rgba(0,0,0,.5) 0 1px 2px;font:normal normal bold 14px/1em Arial, sans-serif;position:fixed;right:10px;bottom:0;z-index:9999;background-color:#398E00;" class="uv-tab uv-slide-bottom "><a id="uvTabLabel" style="background-color: transparent; display:block;padding:6px 10px 2px 42px;text-decoration:none;" href="javascript:return false;"><img src="./Documentation - Leaflet_files/feedback-tab.png" alt="feedback" style="border:0; background-color: transparent; padding:0; margin:0;"></a></div>
	<div class="container">
		<h1><a href="http://leafletjs.com/">Leaflet</a></h1>
		<h3 class="alt">An Open-Source JavaScript Library for Mobile-Friendly Interactive Maps<!-- by <a href="http://cloudmade.com">CloudMade</a>--></h3>

		<div class="social-buttons">
			<iframe src="./Documentation - Leaflet_files/github-btn.htm" allowtransparency="true" frameborder="0" scrolling="0" width="104px" height="20px"></iframe>

			<!--<iframe src="http://ghbtns.com/github-btn.html?user=Leaflet&amp;repo=Leaflet&amp;type=fork&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="98px" height="20px"></iframe>-->

			<a href="http://twitter.com/share" class="twitter-share-button" data-url="http://leafletjs.com" data-text="Leaflet — an open-source JavaScript library for mobile-friendly interactive maps" data-via="LeafletJS" data-related="CloudMade" data-count="none">Tweet</a>

			<a href="https://twitter.com/LeafletJS" class="twitter-follow-button" data-show-count="true" data-show-screen-name="false">Follow @LeafletJS</a>

			<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="http://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

			<iframe src="./Documentation - Leaflet_files/like.htm" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:83px; height:20px;" allowtransparency="true"></iframe>

			<!--<div class="g-plusone" data-size="medium" data-href="http://leafletjs.com/"></div>

			<script type="text/javascript">
			  (function() {
			    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			    po.src = 'https://apis.google.com/js/plusone.js';
			    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
			  })();
			</script>-->
		</div>

		<ul class="nav clearfix">
			<!-- <li><a class="cloudmade-link" href="http://cloudmade.com"></a></li> -->
			<li>
				
					<a href="http://leafletjs.com/index.html">Overview</a>
				
			</li>
			<li>
				
					<a href="http://leafletjs.com/features.html">Features</a>
				
			</li>
			<li>
				
					<a href="http://leafletjs.com/examples.html">Tutorials</a>
				
			</li>
			<li>
				
					<span>API</span>
				
			</li>
			<li>
				
					<a href="http://leafletjs.com/download.html">Download</a>
				
			</li>
			<li>
				
					<a href="http://leafletjs.com/plugins.html">Plugins</a>
				
			</li>
			<li>
				
					<a href="http://leafletjs.com/blog.html">Blog</a>
				
			</li>
			<li><a class="forum-link" href="https://groups.google.com/forum/#!forum/leaflet-js">Forum</a></li>
			<li><a class="twitter-link" href="http://twitter.com/LeafletJS">Twitter</a></li>
			<li><a class="github-link" href="http://github.com/Leaflet/Leaflet">GitHub</a></li>
		</ul>

		<div id="toc" class="clearfix">
	<div class="span-4 colborder">
		<h4>Map</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#map-usage">Usage example</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-constructor">Constructor</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-options">Options</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-events">Events</a></li>
		</ul>
		<h4>Map Methods</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#map-set-methods">For modifying map state</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-get-methods">For getting map state</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-stuff-methods">For layers and controls</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-conversion-methods">Conversion methods</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-misc-methods">Other methods</a></li>
		</ul>
		<h4>Map Misc</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#map-properties">Properties</a></li>
			<li><a href="http://leafletjs.com/reference.html#map-panes">Panes</a></li>
		</ul>
	</div>
	<div class="span-3">
		<h4>UI Layers</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#marker">Marker</a></li>
			<li><a href="http://leafletjs.com/reference.html#popup">Popup</a></li>
		</ul>
		<h4>Raster Layers</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#tilelayer">TileLayer</a></li>
			<li><a href="http://leafletjs.com/reference.html#tilelayer-wms">TileLayer.WMS</a></li>
			<li><a href="http://leafletjs.com/reference.html#tilelayer-canvas">TileLayer.Canvas</a></li>
			<li><a href="http://leafletjs.com/reference.html#imageoverlay">ImageOverlay</a></li>
		</ul>
		<h4>Vector Layers</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#path">Path</a></li>
			<li><a href="http://leafletjs.com/reference.html#polyline">Polyline</a></li>
			<li><a href="http://leafletjs.com/reference.html#multipolyline">MultiPolyline</a></li>
			<li><a href="http://leafletjs.com/reference.html#polygon">Polygon</a></li>
			<li><a href="http://leafletjs.com/reference.html#multipolygon">MultiPolygon</a></li>
			<li><a href="http://leafletjs.com/reference.html#rectangle">Rectangle</a></li>
			<li><a href="http://leafletjs.com/reference.html#circle">Circle</a></li>
			<li><a href="http://leafletjs.com/reference.html#circlemarker">CircleMarker</a></li>
		</ul>
	</div>
	<div class="span-3">
		<h4>Other Layers</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#layergroup">LayerGroup</a></li>
			<li><a href="http://leafletjs.com/reference.html#featuregroup">FeatureGroup</a></li>
			<li><a href="http://leafletjs.com/reference.html#geojson">GeoJSON</a></li>
		</ul>
		<h4>Basic Types</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></li>
			<li><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></li>
			<li><a href="http://leafletjs.com/reference.html#point">Point</a></li>
			<li><a href="http://leafletjs.com/reference.html#bounds">Bounds</a></li>
			<li><a href="http://leafletjs.com/reference.html#icon">Icon</a></li>
			<li><a href="http://leafletjs.com/reference.html#divicon">DivIcon</a></li>
		</ul>
		<h4>Controls</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#control">Control</a></li>
			<li><a href="http://leafletjs.com/reference.html#control-zoom">Zoom</a></li>
			<li><a href="http://leafletjs.com/reference.html#control-attribution">Attribution</a></li>
			<li><a href="http://leafletjs.com/reference.html#control-layers">Layers</a></li>
			<li><a href="http://leafletjs.com/reference.html#control-scale">Scale</a></li>
		</ul>
	</div>
	<div class="span-3">
		<h4>Events</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#events">Events methods</a></li>
			<li><a href="http://leafletjs.com/reference.html#event-objects">Event objects</a></li>
		</ul>
		<h4>Utility</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#class">Class</a></li>
			<li><a href="http://leafletjs.com/reference.html#browser">Browser</a></li>
			<li><a href="http://leafletjs.com/reference.html#util">Util</a></li>
			<li><a href="http://leafletjs.com/reference.html#transformation">Transformation</a></li>
			<li><a href="http://leafletjs.com/reference.html#lineutil">LineUtil</a></li>
			<li><a href="http://leafletjs.com/reference.html#polyutil">PolyUtil</a></li>
		</ul>
		<h4>DOM Utility</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#domevent">DomEvent</a></li>
			<li><a href="http://leafletjs.com/reference.html#domutil">DomUtil</a></li>
			<li><a href="http://leafletjs.com/reference.html#posanimation">PosAnimation</a></li>
			<li><a href="http://leafletjs.com/reference.html#draggable">Draggable</a></li>
		</ul>
	</div>
	<div class="span-3 last">
		<h4>Interfaces</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#ihandler">IHandler</a></li>
			<li><a href="http://leafletjs.com/reference.html#ilayer">ILayer</a></li>
			<!--<li><a class="nodocs" href="#">IFeature</a></li>-->
			<li><a href="http://leafletjs.com/reference.html#icontrol">IControl</a></li>
			<li><a href="http://leafletjs.com/reference.html#iprojection">IProjection</a></li>
			<li><a href="http://leafletjs.com/reference.html#icrs">ICRS</a></li>
		</ul>

		<h4>Misc</h4>
		<ul>
			<li><a href="http://leafletjs.com/reference.html#global">global switches</a></li>
			<li><a href="http://leafletjs.com/reference.html#noconflict">noConflict</a></li>
			<li><a href="http://leafletjs.com/reference.html#version">version</a></li>
		</ul>
	</div>
</div>

<!--<a href="#toc" id="back-to-top">&uarr;</a>-->

<hr>
<p>This reference reflects <strong>Leaflet 0.5</strong>. You can find docs for the in-progress master version in <code class="javascript">reference.html</code> of <a href="https://github.com/Leaflet/Leaflet/zipball/gh-pages-master">gh-pages-master branch</a>.<!--<br />Older docs for version 0.3 can be <a href="https://github.com/Leaflet/Leaflet/zipball/7fde9938fa36070191f939c9948285d7ddc07368">downloaded here</a>--></p>

<h2 id="map-class">L.Map</h2>

<p>The central class of the API — it is used to create a map on a page and manipulate it.</p>

<h3 id="map-usage">Usage example</h3>

<pre><code class="javascript"><span class="comment">// initialize the map on the "map" div with a given center and zoom</span>
<span class="keyword">var</span> map = L.map(<span class="string">'map'</span>, {
    center: [<span class="number">51.505</span>, -<span class="number">0.09</span>],
    zoom: <span class="number">13</span>
});</code></pre>

<h3 id="map-constructor" class="left">Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Map</b>(
			<nobr>&lt;HTMLElement|String&gt; <i>id</i>,</nobr>
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map-options">Map options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Map(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.map(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a map object given a div element (or its id) and optionally an object literal with map options described below.</td>
	</tr>
</tbody></table>




<h3 id="map-options">Options</h3>

<h4>Map State Options</h4>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>center</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>Initial geographical center of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoom</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>Initial map zoom.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layers</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>[]</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>Layers that will be added to the map initially.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>minZoom</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>Minimum zoom level of the map. Overrides any <code class="javascript">minZoom</code> set on map layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>maxZoom</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>Maximum zoom level of the map. This overrides any <code class="javascript">maxZoom</code> set on map layers.</td>
	</tr>
	<tr id="map-maxbounds">
		<td><code class="javascript"><b>maxBounds</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>When this option is set, the map restricts the view to the given geographical bounds, bouncing the user back when he tries to pan outside the view, and also not allowing to zoom out to a view that's larger than the given bounds (depending on the map size). To set the restriction dynamically, use <a href="http://leafletjs.com/reference.html#map-setmaxbounds">setMaxBounds</a> method</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>crs</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#icrs">CRS</a></code></td>
		<td><code class="javascript">L.CRS.<br>EPSG3857</code></td>
		<td>Coordinate Reference System to use. Don't change this if you're not sure what it means.</td>
	</tr>
</tbody></table>

<h4>Interaction Options</h4>

<table>
	<tbody><tr>
		<th class="width140">Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragging</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the map be draggable with mouse/touch or not.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>touchZoom</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the map can be zoomed by touch-dragging with two fingers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>scrollWheelZoom</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the map can be zoomed by using the mouse wheel.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>doubleClickZoom</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the map can be zoomed in by double clicking on it.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>boxZoom</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the map can be zoomed to a rectangular area specified by dragging the mouse while pressing shift.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>trackResize</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the map automatically handles browser window resize to update itself.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>worldCopyJump</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>With this option enabled, the map tracks when you pan to another "copy" of the world and seamlessly jumps to the original one so that all overlays like markers and vector layers are still visible.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>closePopupOnClick</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Set it to <code class="javascript"><span class="literal">false</span></code> if you don't want popups to close when user clicks the map.</td>
	</tr>
</tbody></table>

<h4>Keyboard Navigation Options</h4>

<table>
	<tbody><tr>
		<th class="width140">Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>keyboard</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Makes the map focusable and allows users to navigate the map with keyboard arrows and <code class="javascript">+</code>/<code class="javascript">-</code> keys.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>keyboardPanOffset</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">80</span></code></td>
		<td>Amount of pixels to pan when pressing an arrow key.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>keyboardZoomOffset</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1</span></code></td>
		<td>Number of zoom levels to change when pressing <code class="javascript">+</code> or <code class="javascript">-</code> key.</td>
	</tr>
</tbody></table>

<h4>Panning Inertia Options</h4>

<table>
	<tbody><tr>
		<th class="width140">Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>inertia</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>If enabled, panning of the map will have an inertia effect where the map builds momentum while dragging and continues moving in the same direction for some time. Feels especially nice on touch devices.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>inertiaDeceleration</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">3000</span></code></td>
		<td>The rate with which the inertial movement slows down, in pixels/second<sup>2</sup>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>inertiaMaxSpeed</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1500</span></code></td>
		<td>Max speed of the inertial movement, in pixels/second.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>inertiaThreshold</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript">depends</code></td>
		<td>Amount of milliseconds that should pass between stopping the movement and releasing the mouse or touch to prevent inertial movement. <code class="javascript"><span class="number">32</span></code> for touch devices and <code class="javascript"><span class="number">14</span></code> for the rest by default.</td>
	</tr>
</tbody></table>

<h4>Control options</h4>

<table>
	<tbody><tr>
		<th class="width140">Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomControl</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the <a href="http://leafletjs.com/reference.html#control-zoom">zoom control</a> is added to the map by default.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>attributionControl</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether the <a href="http://leafletjs.com/reference.html#control-attribution">attribution control</a> is added to the map by default.</td>
	</tr>
</tbody></table>

<h4>Animation options</h4>

<table>
	<tbody><tr>
		<th class="width140">Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>fadeAnimation</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>Whether the tile fade animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomAnimation</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>Whether the tile zoom animation is enabled. By default it's enabled in all browsers that support CSS3 Transitions except Android.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>markerZoomAnimation</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>Whether markers animate their zoom with the zoom animation, if disabled they will disappear for the length of the animation. By default it's enabled in all browsers that support CSS3 Transitions except Android.</td>
	</tr>
</tbody></table>


<h3 id="map-events">Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th>Event</th>
		<th>Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>click</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user clicks (or taps) the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dblclick</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user double-clicks (or double-taps) the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mousedown</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user pushes the mouse button on the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseup</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user pushes the mouse button on the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseover</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse enters the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseout</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse leaves the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mousemove</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired while the mouse moves over the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contextmenu</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user pushes the right mouse button on the map, prevents default browser context menu from showing if there are listeners on this event.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>focus</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the user focuses the map either by tabbing to it or clicking/panning.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>blur</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the map looses focus.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>preclick</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired before mouse click on the map (sometimes useful when you want something to happen on click before any existing click handlers start running).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>load</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the map is initialized (when its center and zoom are set for the first time).</td>
	</tr>
	<tr id="map-viewreset">
		<td><code class="javascript"><b>viewreset</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the map needs to redraw its content (this usually happens on map zoom or load). Very useful for creating custom overlays.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>movestart</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the view of the map starts changing (e.g. user starts dragging the map).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>move</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired on any movement of the map view.</td>
	</tr>
	<tr id="map-moveend">
		<td><code class="javascript"><b>moveend</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the view of the map ends changed (e.g. user stopped dragging the map).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragstart</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the user starts dragging the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>drag</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired repeatedly while the user drags the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragend</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the user stops dragging the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomstart</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the map zoom is about to change (e.g. before zoom animation).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomend</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the map zoom changes.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>autopanstart</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the map starts autopanning when opening a popup.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layeradd</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#layer-event">LayerEvent</a></code>
		</td><td>Fired when a new layer is added to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layerremove</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#layer-event">LayerEvent</a></code>
		</td><td>Fired when some layer is removed from the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>baselayerchange</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#layer-event">LayerEvent</a></code>
		</td><td>Fired when the base layer is changed through the layer control.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>locationfound</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#location-event">LocationEvent</a></code>
		</td><td>Fired when geolocation (using the <a href="http://leafletjs.com/reference.html#map-locate">locate</a> method) went successfully.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>locationerror</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#error-event">ErrorEvent</a></code>
		</td><td>Fired when geolocation (using the <a href="http://leafletjs.com/map-locate">locate</a> method) failed.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>popupopen</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#popup-event">PopupEvent</a></code>
		</td><td>Fired when a popup is opened (using <code class="javascript">openPopup</code> method).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>popupclose</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#popup-event">PopupEvent</a></code>
		</td><td>Fired when a popup is closed (using <code class="javascript">closePopup</code> method).</td>
	</tr>
</tbody></table>


<h3 id="map-set-methods">Methods for Modifying Map State</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>setView</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>center</i>,</nobr>
			<nobr>&lt;Number&gt; <i>zoom</i>,</nobr>
			<nobr>&lt;Boolean&gt; <i>forceReset?</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the view of the map (geographical center and zoom). If <code class="javascript">forceReset</code> is set to <code class="javascript"><span class="literal">true</span></code>, the map is reloaded even if it's eligible for pan or zoom animation (<code class="javascript"><span class="literal">false</span></code> by default).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setZoom</b>(
			<nobr>&lt;Number&gt; <i>zoom</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the zoom of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomIn</b>( <nobr>&lt;Number&gt; delta? )</nobr></code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Increases the zoom of the map by <code class="javascript">delta</code> (<code class="javascript"><span class="number">1</span></code> by default).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomOut</b>( <nobr>&lt;Number&gt; delta? )</nobr></code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Decreases the zoom of the map by <code class="javascript">delta</code> (<code class="javascript"><span class="number">1</span></code> by default).</td>
	</tr>
	<tr id="map-fitbounds">
		<td><code class="javascript"><b>fitBounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets a map view that contains the given geographical bounds with the maximum zoom level possible.</td>
	</tr>
	<tr id="map-fitworld">
		<td><code class="javascript"><b>fitWorld</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets a map view that mostly contains the whole world with the maximum zoom level possible.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>panTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Pans the map to a given center. Makes an animated pan if new center is not more than one screen away from the current one.</td>
	</tr>
	<tr id="map-paninsidebounds">
		<td><code class="javascript"><b>panInsideBounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Pans the map to the closest view that would lie inside the given bounds (if it's not already).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>panBy</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Pans the map by a given number of pixels (animated).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>invalidateSize</b>(
			<nobr>&lt;Boolean&gt; <i>animate?</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Checks if the map container size changed and updates the map if so — call it after you've changed the map size dynamically. If <code class="javascript">animate</code> is <code class="javascript"><span class="literal">true</span></code>, map animates the update.</td>
	</tr>
	<tr id="map-setmaxbounds">
		<td><code class="javascript"><b>setMaxBounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Restricts the map view to the given bounds (see <a href="http://leafletjs.com/reference.html#map-maxbounds">map maxBounds</a> option).</td>
	</tr>
	<tr id="map-locate">
		<td><code class="javascript"><b>locate</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map-locate-options">Locate options</a>&gt; <i>options?</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Tries to locate the user using the <a href="https://en.wikipedia.org/wiki/W3C_Geolocation_API">Geolocation API</a>, firing a <code class="javascript">locationfound</code> event with location data on success or a <code class="javascript">locationerror</code> event on failure, and optionally sets the map view to the user's location with respect to detection accuracy (or to the world view if geolocation failed). See <a href="http://leafletjs.com/reference.html#map-locate-options">Locate options</a> for more details.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>stopLocate</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Stops watching location previously initiated by <code class="javascript"><b>map.locate</b>({watch: true})</code>.</td>
	</tr>
</tbody></table>

<h3 id="map-get-methods">Methods for Getting Map State</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>getCenter</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the geographical center of the map view.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getZoom</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the current zoom of the map view.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getMinZoom</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the minimum zoom level of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getMaxZoom</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the maximum zoom level of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getBounds</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td>Returns the LatLngBounds of the current map view.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getBoundsZoom</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i>,</nobr>
			<nobr>&lt;Boolean&gt; <i>inside?</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>

		<td>Returns the maximum zoom level on which the given bounds fit to the map view in its entirety. If <code class="javascript">inside</code> (optional) is set to <code class="javascript"><span class="literal">true</span></code>, the method instead returns the minimum zoom level on which the map view fits into the given bounds in its entirety.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getSize</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the current size of the map container.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getPixelBounds</b>()</code></td>
		<td><code class="javascript">Bounds</code></td>
		<td>Returns the bounds of the current map view in projected pixel coordinates (sometimes useful in layer and overlay implementations).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getPixelOrigin</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the projected pixel coordinates of the top left point of the map layer (useful in custom layer and overlay implementations).</td>
	</tr>
</tbody></table>

<h3 id="map-stuff-methods">Methods for Layers and Controls</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr id="map-addlayer">
		<td><code class="javascript"><b>addLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i>,</nobr>
			<nobr>&lt;Boolean&gt; <i>insertAtTheBottom?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the given layer to the map. If optional <code class="javascript">insertAtTheBottom</code> is set to <code class="javascript"><span class="literal">true</span></code>, the layer is inserted under all others (useful when switching base tile layers).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes the given layer from the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>hasLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the given layer is currently added to the map.</td>
	</tr>

	<tr id="map-openpopup">
		<td><code class="javascript"><b>openPopup</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#popup">Popup</a>&gt; <i>popup</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability).</td>
	</tr>
	<tr id="map-closepopup">
		<td><code class="javascript"><b>closePopup</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Closes the popup opened with <a href="http://leafletjs.com/reference.html#map-openpopup">openPopup</a>.</td>
	</tr>
	<tr id="map-addcontrol">
		<td><code class="javascript"><b>addControl</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#icontrol">IControl</a>&gt; <i>control</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the given control to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeControl</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#icontrol">IControl</a>&gt; <i>control</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes the given control from the map.</td>
	</tr>
</tbody></table>


<h3 id="map-conversion-methods">Conversion Methods</h3>

<table>
	<tbody><tr>
		<th class="width200">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>latLngToLayerPoint</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the map layer point that corresponds to the given geographical coordinates (useful for placing overlays on the map).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layerPointToLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the geographical coordinates of a given map layer point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>containerPointToLayerPoint</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Converts the point relative to the map container to a point relative to the map layer.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layerPointToContainerPoint</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Converts the point relative to the map layer to a point relative to the map container.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>latLngToContainerPoint</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the map container point that corresponds to the given geographical coordinates.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>containerPointToLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the geographical coordinates of a given map container point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>project</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i>,</nobr>
			<nobr>&lt;Number&gt; <i>zoom?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Projects the given geographical coordinates to absolute pixel coordinates for the given zoom level (current zoom level by default).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>unproject</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i>,</nobr>
			<nobr>&lt;Number&gt; <i>zoom?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Projects the given absolute pixel coordinates to geographical coordinates for the given zoom level (current zoom level by default).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseEventToContainerPoint</b>(
			<nobr>&lt;MouseEvent&gt; <i>event</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the pixel coordinates of a mouse click (relative to the top left corner of the map) given its event object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseEventToLayerPoint</b>(
			<nobr>&lt;MouseEvent&gt; <i>event</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the pixel coordinates of a mouse click relative to the map layer given its event object.
	</td></tr>
	<tr>
		<td><code class="javascript"><b>mouseEventToLatLng</b>(
			<nobr>&lt;MouseEvent&gt; <i>event</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the geographical coordinates of the point the mouse clicked on given the click's event object.</td>
	</tr>
</tbody></table>

<h3 id="map-misc-methods">Other Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>getContainer</b>()</code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Returns the container element of the map.</td>
	</tr>
	<tr id="map-getpanes">
		<td><code class="javascript"><b>getPanes</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#map-panes">MapPanes</a></code></td>
		<td>Returns an object with different map panes (to render overlays in).</td>
	</tr>
	<tr id="map-whenready">
		<td><code class="javascript"><b>whenReady</b>(
			<nobr>&lt;Function&gt; <i>fn</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr></code></td>
		<td><code class="javascript">this</code></td>
		<td>Runs the given callback when the map gets initialized with a place and zoom, or immediately if it happened already, optionally passing a function context.</td>
	</tr>
</tbody></table>

<h3 id="map-locate-options">Locate options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>watch</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, starts continous watching of location changes (instead of detecting it once) using W3C <code class="javascript">watchPosition</code> method. You can later stop watching using <code class="javascript"><b>map.stopLocate</b>()</code> method.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setView</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, automatically sets the map view to the user location with respect to detection accuracy, or to world view if geolocation failed.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>maxZoom</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">Infinity</span></code></td>
		<td>The maximum zoom for automatic view setting when using `setView` option.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>timeout</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">10000</span></code></td>
		<td>Number of millisecond to wait for a response from geolocation before firing a <code class="javascript">locationerror</code> event.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>maximumAge</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">0</span></code></td>
		<td>Maximum age of detected location. If less than this amount of milliseconds passed since last geolocation response, <code class="javascript">locate</code> will return a cached location.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>enableHighAccuracy</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>Enables high accuracy, see <a href="http://dev.w3.org/geo/api/spec-source.html#high-accuracy">description in the W3C spec</a>.</td>
	</tr>
</tbody></table>


<h3 id="map-properties">Properties</h3>

<p>Map properties include interaction handlers that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging or touch zoom (see <a href="http://leafletjs.com/reference.html#ihandler">IHandler</a> methods). Example:</p>

<pre><code class="javascript">map.doubleClickZoom.disable();</code></pre>

<p>You can also access default map controls like attribution control through map properties:</p>

<pre><code class="javascript">map.attributionControl.addAttribution(<span class="string">"Earthquake data &amp;copy; GeoNames"</span>);</code></pre>

<table>
	<tbody><tr>
		<th class="minwidth">Property</th>
		<th class="minwidth">Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragging</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Map dragging handler (by both mouse and touch).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>touchZoom</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Touch zoom handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>doubleClickZoom</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Double click zoom handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>scrollWheelZoom</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Scroll wheel zoom handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>boxZoom</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Box (shift-drag with mouse) zoom handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>keyboard</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Keyboard navigation handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomControl</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#control-zoom"><code class="javascript">Control.Zoom</code></a></td>
		<td>Zoom control.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>attributionControl</b></code></td>
		<td><a href="http://leafletjs.com/reference.html#control-attribution"><code class="javascript">Control.Attribution</code></a></td>
		<td>Attribution control.</td>
	</tr>
</tbody></table>


<h3 id="map-panes">Map Panes</h3>

<p>An object literal (returned by <a href="http://leafletjs.com/reference.html#map-getpanes">map.getPanes</a>) that contains different map panes that you can use to put your custom overlays in. The difference is mostly in zIndex order that such overlays get.</p>

<table>
	<tbody><tr>
		<th class="width100">Property</th>
		<th class="width100">Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>mapPane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane that contains all other map panes.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>tilePane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane for tile layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>objectsPane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane that contains all the panes except tile pane.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>shadowPane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane for overlay shadows (e.g. marker shadows).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>overlayPane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane for overlays like polylines and polygons.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>markerPane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane for marker icons.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>popupPane</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>Pane for popups.</td>
	</tr>
</tbody></table>


<h2 id="marker">L.Marker</h2>

<p>Used to put markers on the map.</p>

<pre><code class="javascript">L.marker([<span class="number">50.5</span>, <span class="number">30.5</span>]).addTo(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Marker</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i>,</nobr>
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#marker-options">Marker options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Marker(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.marker(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a Marker object given a geographical point and optionally an options object.</td>
	</tr>
</tbody></table>

<h3 id="marker-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>icon</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#icon">L.Icon</a></code></td>
		<td>*</td>
		<td>Icon class to use for rendering the marker. See <a href="http://leafletjs.com/reference.html#icon">Icon documentation</a> for details on how to customize the marker icon. Set to <code class="javascript">new L.Icon.Default()</code> by default.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>clickable</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>If <code class="javascript"><span class="literal">false</span></code>, the marker will not emit mouse events and will act as a part of the underlying map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>draggable</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>Whether the marker is draggable with mouse/touch or not.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>title</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">''</span></code></td>
		<td>Text for the browser tooltip that appear on marker hover (no tooltip by default).</td>
	</tr>
	<tr id="marker-zindexoffset">
		<td><code class="javascript"><b>zIndexOffset</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">0</span></code></td>
		<td>By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like <code class="javascript">1000</code> (or high negative value, respectively).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>opacity</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1.0</span></code></td>
		<td>The opacity of the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>riseOnHover</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, the marker will get on top of others when you hover the mouse over it.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>riseOffset</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">250</span></code></td>
		<td>The z-index offset used for the <code class="javascript">riseOnHover</code> feature.</td>
	</tr>
</tbody></table>

<h3>Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>click</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user clicks (or taps) the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dblclick</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user double-clicks (or double-taps) the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mousedown</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user pushes the mouse button on the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseover</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse enters the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseout</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse leaves the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contextmenu</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user right-clicks on the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragstart</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the user starts dragging the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>drag</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired repeatedly while the user drags the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragend</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the user stops dragging the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>move</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the marker is moved via setLatLng. New coordinate include in event arguments.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>remove</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the marker is removed from the map.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the marker to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getLatLng</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the current geographical position of the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes the marker position to the given point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setIcon</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#icon">Icon</a>&gt; <i>icon</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes the marker icon.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setZIndexOffset</b>(
			<nobr>&lt;Number&gt; <i>offset</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes the <a href="http://leafletjs.com/reference.html#marker-zindexoffset">zIndex offset</a> of the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setOpacity</b>(
			<nobr>&lt;Number&gt; <i>opacity</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes the opacity of the marker.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>update</b>()
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Updates the marker position, useful if coordinates of its <code class="javascript">latLng</code> object were changed directly.</td>
	</tr>
	<tr id="marker-bindpopup">
		<td><code class="javascript"><b>bindPopup</b>(
			<nobr>&lt;String&gt; <i>htmlContent</i>,</nobr>
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#popup-options">Popup options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Binds a popup with a particular HTML content to a click on this marker. You can also open the bound popup with the Marker <a href="http://leafletjs.com/reference.html#marker-openpopup">openPopup</a> method.</td>
	</tr>
	<tr id="marker-unbindpopup">
		<td><code class="javascript"><b>unbindPopup</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Unbinds the popup previously bound to the marker with <code class="javascript">bindPopup</code>.</td>
	</tr>
	<tr id="marker-openpopup">
		<td><code class="javascript"><b>openPopup</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Opens the popup previously bound by the <a href="http://leafletjs.com/reference.html#marker-bindpopup">bindPopup</a> method.</td>
	</tr>
	<tr id="marker-closepopup">
		<td><code class="javascript"><b>closePopup</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Closes the bound popup of the marker if it's opened.</td>
	</tr>
</tbody></table>

<h3 id="marker-interaction-handlers">Interaction handlers</h3>

<p>Interaction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see <a href="http://leafletjs.com/reference.html#ihandler">IHandler</a> methods). Example:</p>

<pre><code class="javascript">marker.dragging.disable();</code></pre>

<table>
	<tbody><tr>
		<th class="width100">Property</th>
		<th class="width100">Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>dragging</td>
		<td><a href="http://leafletjs.com/reference.html#ihandler"><code class="javascript">IHandler</code></a></td>
		<td>Marker dragging handler (by both mouse and touch).</td>
	</tr>
</tbody></table>



<h2 id="popup">L.Popup</h2>

<p>Used to open popups in certain places of the map. Use <a href="http://leafletjs.com/reference.html#map-openpopup">Map#openPopup</a> to open popups while making sure that only one popup is open at one time (recommended for usability), or use <a href="http://leafletjs.com/reference.html#map-addlayer">Map#addLayer</a> to open as many as you want.</p>

<h3>Usage example</h3>
<p>If you want to just bind a popup to marker click and then open it, it's really easy:</p>
<pre><code class="javascript">marker.bindPopup(popupContent).openPopup();</code></pre>
<p>Path overlays like polylines also have a <code class="javascript">bindPopup</code> method. Here's a more complicated way to open a popup on a map:</p>

<pre><code class="javascript"><span class="keyword">var</span> popup = L.popup()
    .setLatLng(latlng)
    .setContent(<span class="string">'&lt;p&gt;Hello world!&lt;br /&gt;This is a nice popup.&lt;/p&gt;'</span>)
    .openOn(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Popup</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#popup-options">Popup options</a>&gt; <i>options?</i>,</nobr>
			<nobr>&lt;object&gt; <i>source?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Popup(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.popup(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a Popup object given an optional options object that describes its appearance and location and an optional object that is used to tag the popup with a reference to the source object to which it refers.</td>
	</tr>
</tbody></table>

<h3 id="popup-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>maxWidth</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">300</span></code></td>
		<td>Max width of the popup.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>minWidth</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">50</span></code></td>
		<td>Min width of the popup.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>maxHeight</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>If set, creates a scrollable container of the given height inside a popup if its content exceeds it.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>autoPan</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Set it to <code class="javascript"><span class="literal">false</span></code> if you don't want the map to do panning animation to fit the opened popup.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>closeButton</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Controls the presense of a close button in the popup.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>offset</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td><code class="javascript"><nobr>Point(<span class="number">0</span>, <span class="number">6</span>)</nobr>
		</code></td>
		<td>The offset of the popup position. Useful to control the anchor of the popup when opening it on some overlays.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>autoPanPadding</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td><code class="javascript"><nobr>Point(<span class="number">5</span>, <span class="number">5</span>)</nobr>
		</code></td>
		<td>The margin between the popup and the edges of the map view after autopanning was performed.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomAnimation</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether to animate the popup on zoom. Disable it if you have problems with Flash content inside popups.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th class="minwidth">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the popup to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>openOn</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the popup to the map and closes the previous one. The same as <code class="javascript">map.openPopup(popup)</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the geographical point where the popup will open.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setContent</b>(
			<nobr>&lt;String&gt; <i>htmlContent</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the HTML content of the popup.</td>
	</tr>
</tbody></table>



<h2 id="tilelayer">L.TileLayer</h2>

<p>Used to load and display tile layers on the map, implements <a href="http://leafletjs.com/reference.html#ilayer">ILayer</a> interface.</p>

<h3>Usage example</h3>

<pre><code class="javascript">L.tileLayer(<span class="string">'http://{s}.tile.cloudmade.com/{key}/{styleId}/256/{z}/{x}/{y}.png'</span>, {
    key: <span class="string">'API-key'</span>,
    styleId: <span class="number">997</span>
}).addTo(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.TileLayer</b>(
			<nobr>&lt;String&gt; <i><a href="http://leafletjs.com/reference.html#url-template">urlTemplate</a></i>,</nobr>
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#tilelayer-options">TileLayer options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.TileLayer(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.tileLayer(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a tile layer object given a <a href="http://leafletjs.com/reference.html#url-template">URL template</a> and optionally an options object.</td>
	</tr>
</tbody></table>

<h3 id="url-template">URL template</h3>

<p>A string of the following form:</p>

<pre><code class="javascript"><span class="string">'http://{s}.somedomain.com/blabla/{z}/{x}/{y}.png'</span></code></pre>

<p><code class="javascript">{s}</code> means one of the available subdomains (used sequentially to help with browser parallel requests per domain limitation; subdomain values are specified in options; <code class="javascript">a</code>, <code class="javascript">b</code> or <code class="javascript">c</code> by default, can be omitted), <code class="javascript">{z}</code> — zoom level, <code class="javascript">{x}</code> and <code class="javascript">{y}</code> — tile coordinates.</p>

<p>You can use custom keys in the template, which will be evaluated from TileLayer options, like this:</p>

<pre><code class="javascript">L.tileLayer(<span class="string">'http://{s}.somedomain.com/{foo}/{z}/{x}/{y}.png'</span>, {foo: <span class="string">'bar'</span>});</code></pre>

<h3 id="tilelayer-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>minZoom</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">0</span></code></td>
		<td>Minimum zoom number.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>maxZoom</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">18</span></code></td>
		<td>Maximum zoom number.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>tileSize</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">256</span></code></td>
		<td>Tile size (width and height in pixels, assuming tiles are square).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>subdomains</b></code></td>
		<td><code class="javascript">String</code> or <code class="javascript">String[]</code></td>
		<td><code class="javascript"><span class="string">'abc'</span></code></td>
		<td>Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>errorTileUrl</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">''</span></code></td>
		<td>URL to the tile image to show in place of the tile that failed to load.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>attribution</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">''</span></code></td>
		<td>e.g. "© CloudMade" — the string used by the attribution control, describes the layer data.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>tms</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, inverses Y axis numbering for tiles (turn this on for TMS services).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>continuousWorld</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If set to <code class="javascript"><span class="literal">true</span></code>, the tile coordinates won't be wrapped by world width (-180 to 180 longitude) or clamped to lie within world height (-90 to 90). Use this if you use Leaflet for maps that don't reflect the real world (e.g. game, indoor or photo maps).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>noWrap</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If set to <code class="javascript"><span class="literal">true</span></code>, the tiles just won't load outside the world width (-180 to 180 longitude) instead of repeating.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomOffset</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">0</span></code></td>
		<td>The zoom number used in tile URLs will be offset with this value.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zoomReverse</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If set to <code class="javascript"><span class="literal">true</span></code>, the zoom number used in tile URLs will be reversed (<code class="javascript">maxZoom - zoom</code> instead of <code class="javascript">zoom</code>)</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>opacity</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1.0</span></code></td>
		<td>The opacity of the tile layer.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>zIndex</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>The explicit zIndex of the tile layer. Not set by default.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>unloadInvisibleTiles</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, all the tiles that are not visible after panning are removed (for better performance). <code class="javascript"><span class="literal">true</span></code> by default on mobile WebKit, otherwise <code class="javascript"><span class="literal">false</span></code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>updateWhenIdle</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>If <code class="javascript"><span class="literal">false</span></code>, new tiles are loaded during panning, otherwise only after it (for better performance). <code class="javascript"><span class="literal">true</span></code> by default on mobile WebKit, otherwise <code class="javascript"><span class="literal">false</span></code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>detectRetina</b></code></td>
		<td><code class="javascript"><code class="javascript">Boolean</code></code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code> and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>reuseTiles</b></code></td>
		<td><code class="javascript"><code class="javascript">Boolean</code></code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, all the tiles that are not visible after panning are placed in a reuse queue from which they will be fetched when new tiles become visible (as opposed to dynamically creating new ones). This will in theory keep memory usage low and eliminate the need for reserving new memory whenever a new tile is needed.</td>
	</tr>
</tbody></table>

<h3>Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>loading</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the tile layer starts loading tiles.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>load</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the tile layer loaded all visible tiles.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>tileload</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#tile-event">Event</a></code>
		</td><td>Fired when a tile loads.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>tileunload</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#tile-event">Event</a></code>
		</td><td>Fired when a tile is removed (e.g. when you have <code class="javascript">unloadInvisibleTiles</code> on).</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the layer to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToFront</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the tile layer to the top of all tile layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToBack</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the tile layer to the bottom of all tile layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setOpacity</b>(
			<nobr>&lt;Number&gt; <i>opacity</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes the opacity of the tile layer.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setZIndex</b>(
			<nobr>&lt;Number&gt; <i>zIndex</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the zIndex of the tile layer.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>redraw</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Causes the layer to clear all the tiles and request them again.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setUrl</b>(
			<nobr>&lt;String&gt; <i><a href="http://leafletjs.com/reference.html#url-template">urlTemplate</a></i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Updates the layer's URL template and redraws it.</td>
	</tr>
</tbody></table>



<h2 id="tilelayer-wms">L.TileLayer.WMS</h2>

<p>Used to display WMS services as tile layers on the map. Extends <a href="http://leafletjs.com/reference.html#tilelayer">TileLayer</a>.</p>

<h3>Usage example</h3>

<pre><code class="javascript"><span class="keyword">var</span> nexrad = L.tileLayer.wms(<span class="string">"http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi"</span>, {
    layers: <span class="string">'nexrad-n0r-900913'</span>,
    format: <span class="string">'image/png'</span>,
    transparent: <span class="literal">true</span>,
    attribution: <span class="string">"Weather data © 2012 IEM Nexrad"</span>
});</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.TileLayer.WMS</b>(
			<nobr>&lt;String&gt; <i>baseUrl</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#tilelayer-wms-options">TileLayer.WMS options</a>&gt; <i>options</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.TileLayer.WMS(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.tileLayer.wms(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a WMS tile layer object given a base URL of the WMS service and a WMS parameters/options object.</td>
	</tr>
</tbody></table>

<h3 id="tilelayer-wms-options">Options</h3>

<p>Includes all <a href="http://leafletjs.com/reference.html#tilelayer-options">TileLayer options</a> and additionally:</p>

<table>
	<tbody><tr>
		<th class="width100">Option</th>
		<th class="width100">Type</th>
		<th class="width100">Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>layers</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">''</span></code></td>
		<td><b>(required)</b> Comma-separated list of WMS layers to show.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>styles</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">''</span></code></td>
		<td>Comma-separated list of WMS styles.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>format</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'image/jpeg'</span></code></td>
		<td>WMS image format (use <code class="javascript"><span class="string">'image/png'</span></code> for layers with transparency).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>transparent</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, the WMS service will return images with transparency.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>version</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'1.1.1'</span></code></td>
		<td>Version of the WMS service to use.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>setParams</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#tilelayer-wms-options">WMS parameters</a>&gt; <i>params</i></nobr>,
			<nobr>&lt;Boolean&gt; <i>noRedraw?</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Merges an object with the new parameters and re-requests tiles on the current screen (unless <code class="javascript">noRedraw</code> was set to <code class="javascript"><span class="literal">true</span></code>).</td>
	</tr>
</tbody></table>


<h2 id="tilelayer-canvas">L.TileLayer.Canvas</h2>

<p>Used to create Canvas-based tile layers where tiles get drawn on the browser side. Extends <a href="http://leafletjs.com/reference.html#tilelayer">TileLayer</a>.</p>

<h3>Usage example</h3>

<pre><code class="javascript"><span class="keyword">var</span> canvasTiles = L.tileLayer.canvas();

canvasTiles.drawTile = <span class="keyword">function</span>(canvas, tilePoint, zoom) {
    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);
    <span class="comment">// draw something on the tile canvas</span>
}</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.TileLayer.Canvas</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#tilelayer-options">TileLayer options</a>&gt; <i>options?</i> )</nobr>
		</code></td>
		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.TileLayer.Canvas(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.tileLayer.canvas(<span class="comment">…</span>)</code>
		</td>
		<td>Instantiates a Canvas tile layer object given an options object (optionally).</td>
	</tr>
</tbody></table>

<h3>Options</h3>
<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>async</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>Indicates that tiles will be drawn asynchronously. <a href="http://leafletjs.com/reference.html#tilelayer-canvas-tiledrawn">tileDrawn</a> method should be called for each tile after drawing completion.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width200">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr id="tilelayer-canvas-drawtile">
		<td><code class="javascript"><b>drawTile</b>(
			<nobr>&lt;HTMLCanvasElement&gt; <i>canvas</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>tilePoint</i></nobr>,
			<nobr>&lt;Number&gt; <i>zoom</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>You need to define this method after creating the instance to draw tiles; <code class="javascript">canvas</code> is the actual canvas tile on which you can draw, <code class="javascript">tilePoint</code> represents the tile numbers, and <code class="javascript">zoom</code> is the current zoom.</td>
	</tr>
	<tr id="tilelayer-canvas-tiledrawn">
		<td><code class="javascript"><b>tileDrawn</b>( <nobr>&lt;HTMLCanvasElement&gt; <i>canvas</i></nobr> )</code></td>
		<td>-</td>
		<td>If <code class="javascript">async</code> option is defined, this function should be called for each tile after drawing completion. <code class="javascript">canvas</code> is the same canvas element, that was passed to <a href="http://leafletjs.com/reference.html#tilelayer-canvas-drawtile">drawTile</a>.</td>
	</tr>
</tbody></table>


<h2 id="imageoverlay">L.ImageOverlay</h2>

<p>Used to load and display a single image over specific bounds of the map, implements <a href="http://leafletjs.com/reference.html#ilayer">ILayer</a> interface.</p>

<h3>Usage example</h3>

<pre><code class="javascript"><span class="keyword">var</span> imageUrl = <span class="string">'http://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg'</span>,
    imageBounds = [[<span class="number">40.712216</span>, -<span class="number">74.22655</span>], [<span class="number">40.773941</span>, -<span class="number">74.12544</span>]];

L.imageOverlay(imageUrl, imageBounds).addTo(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.ImageOverlay</b>(
			<nobr>&lt;String&gt; <i>imageUrl</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#imageoverlay-options">ImageOverlay options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.ImageOverlay(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.imageOverlay(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates an image overlay object given the URL of the image and the geographical bounds it is tied to.</td>
	</tr>
</tbody></table>

<h3 id="imageoverlay-options">Options</h3>
<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th class="minwidth">Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>opacity</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1.0</span></code></td>
		<td>The opacity of the image overlay.</td>
	</tr>
</tbody></table>

<h3 id="imageoverlay-methods">Methods</h3>
<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the overlay to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setOpacity</b>(
			<nobr>&lt;Number&gt; <i>opacity</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the opacity of the overlay.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToFront</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the layer to the top of all overlays.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToBack</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the layer to the bottom of all overlays.</td>
	</tr>
</tbody></table>


<h2 id="path">L.Path</h2>
<p>An abstract class that contains options and constants shared between vector overlays (Polygon, Polyline, Circle). Do not use it directly.

</p><h3 id="path-options">Options</h3>
<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th class="minwidth">Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>stroke</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether to draw stroke along the path. Set it to <code class="javascript"><span class="literal">false</span></code> to disable borders on polygons or circles.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>color</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'#03f'</span></code></td>
		<td>Stroke color.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>weight</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">5</span></code></td>
		<td>Stroke width in pixels.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>opacity</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">0.5</span></code></td>
		<td>Stroke opacity.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>fill</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>Whether to fill the path with color. Set it to <code class="javascript"><span class="literal">false</span></code> to disable filling on polygons or circles.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>fillColor</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>same as color</td>
		<td>Fill color.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>fillOpacity</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">0.2</span></code></td>
		<td>Fill opacity.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dashArray</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="literal">null</span></code></td>
		<td>A string that defines the stroke <a href="https://developer.mozilla.org/en/SVG/Attribute/stroke-dasharray">dash pattern</a>. Doesn't work on canvas-powered layers (e.g. Android 2).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>clickable</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>If <code class="javascript"><span class="literal">false</span></code>, the vector will not emit mouse events and will act as a part of the underlying map.</td>
	</tr>
</tbody></table>

<h3>Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>click</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user clicks (or taps) the object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dblclick</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user double-clicks (or double-taps) the object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mousedown</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user pushes the mouse button on the object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseover</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse enters the object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseout</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse leaves the object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contextmenu</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user pushes the right mouse button on the object, prevents default browser context menu from showing if there are listeners on this event.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>add</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the path is added to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>remove</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the path is removed from the map.</td>
	</tr>
</tbody></table>

<h3 id="path-methods">Methods</h3>
<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the layer to the map.</td>
	</tr>
	<tr id="path-bindpopup">
		<td><code class="javascript"><b>bindPopup</b>(
			<nobr>&lt;String&gt; <i>htmlContent</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#popup-options">Popup options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Binds a popup with a particular HTML content to a click on this path.</td>
	</tr>
	<tr id="path-unbindpopup">
		<td><code class="javascript"><b>unbindPopup</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Unbinds the popup previously bound to the path with <code class="javascript">bindPopup</code>.</td>
	</tr>
	<tr id="path-openpopup">
		<td><code class="javascript"><b>openPopup</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Opens the popup previously bound by the <a href="http://leafletjs.com/reference.html#path-bindpopup">bindPopup</a> method in the given point, or in one of the path's points if not specified.</td>
	</tr>
	<tr id="path-closepopup">
		<td><code class="javascript"><b>closePopup</b>()</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Closes the path's bound popup if it is opened.</td>
	</tr>
	<tr id="path-setstyle">
		<td><code class="javascript"><b>setStyle</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#path-options">Path options</a>&gt; <i>object</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes the appearance of a Path based on the options in the <a href="http://leafletjs.com/reference.html#path-options">Path options</a> object.</td>
	</tr>
	<tr id="path-getbounds">
		<td><code class="javascript"><b>getBounds</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td>Returns the LatLngBounds of the path.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToFront</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the layer to the top of all path layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToBack</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the layer to the bottom of all path layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>redraw</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.</td>
	</tr>
</tbody></table>

<h3>Static properties</h3>
<table>
	<tbody><tr>
		<th>Constant</th>
		<th>Type</th>
		<th>Value</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript">SVG</code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>True if SVG is used for vector rendering (true for most modern browsers).</td>
	</tr>
	<tr>
		<td><code class="javascript">VML</code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>True if VML is used for vector rendering (IE 6-8).</td>
	</tr>
	<tr>
		<td><code class="javascript">CANVAS</code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>depends</td>
		<td>True if Canvas is used for vector rendering (Android 2). You can also force this by setting global variable <code class="javascript">L_PREFER_CANVAS</code> to <code class="javascript"><span class="literal">true</span></code> <em>before</em> the Leaflet include on your page — sometimes it can increase performance dramatically when rendering thousands of circle markers, but currently suffers from a bug that causes removing such layers to be extremely slow.</td>
	</tr>
	<tr>
		<td><code class="javascript">CLIP_PADDING</code></td>
		<td><code class="javascript">Number</code></td>
		<td><nobr><code class="javascript"><span class="number">0.5</span></code> for SVG</nobr><br><nobr><code class="javascript"><span class="number">0.02</span></code> for VML</nobr></td>
		<td>How much to extend the clip area around the map view (relative to its size, e.g. 0.5 is half the screen in each direction). Smaller values mean that you will see clipped ends of paths while you're dragging the map, and bigger values decrease drawing performance.</td>
	</tr>
</tbody></table>


<h2 id="polyline">L.Polyline</h2>

<p>A class for drawing polyline overlays on a map. Extends <a href="http://leafletjs.com/reference.html#path">Path</a>. Use <a href="http://leafletjs.com/reference.html#map-addlayer">Map#addLayer</a> to add it to the map.</p>

<h3>Usage example</h3>
<pre><code class="javascript"><span class="comment">// create a red polyline from an arrays of LatLng points</span>
<span class="keyword">var</span> polyline = L.polyline(latlngs, {color: <span class="string">'red'</span>}).addTo(map);

<span class="comment">// zoom the map to the polyline</span>
map.fitBounds(polyline.getBounds());</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Polyline</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[]&gt; <i>latlngs</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#polyline-options">Polyline options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Polyline(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.polyline(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a polyline object given an array of geographical points and optionally an options object.</td>
	</tr>
</tbody></table>

<h3 id="polyline-options">Options</h3>

<p>You can use <a href="http://leafletjs.com/reference.html#path-options">Path options</a> and additionally the following options:</p>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>smoothFactor</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1.0</span></code></td>
		<td>How much to simplify the polyline on each zoom level. More means better performance and smoother look, and less means more accurate representation.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>noClip</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>Disabled polyline clipping.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<p>You can use <a href="http://leafletjs.com/reference.html#path-methods">Path methods</a> and additionally the following methods:</p>

<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds a given point to the polyline.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setLatLngs</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[]&gt; <i>latlngs</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Replaces all the points in the polyline with the given array of geographical points.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getLatLngs</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[]</code></td>
		<td>Returns an array of the points in the path.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>spliceLatLngs</b>(
			<nobr>&lt;Number&gt; <i>index</i></nobr>,
			<nobr>&lt;Number&gt; <i>pointsToRemove</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng?</i>, … )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[]</code></td>
		<td>Allows adding, removing or replacing points in the polyline. Syntax is the same as in <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice">Array#splice</a>. Returns the array of removed points (if any).</td>
	</tr>
	<tr id="path-getbounds">
		<td><code class="javascript"><b>getBounds</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td>Returns the LatLngBounds of the polyline.</td>
	</tr>
</tbody></table>



<h2 id="multipolyline">L.MultiPolyline</h2>

<p>Extends <a href="http://leafletjs.com/reference.html#featuregroup">FeatureGroup</a> to allow creating multi-polylines (single layer that consists of several polylines that share styling/popup).</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.MultiPolyline</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[][]&gt; <i>latlngs</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#polyline-options">Polyline options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.MultiPolyline(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.multiPolyline(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a multi-polyline object given an array of arrays of geographical points (one for each individual polyline) and optionally an options object.</td>
	</tr>
</tbody></table>



<h2 id="polygon">L.Polygon</h2>

<p>A class for drawing polygon overlays on a map. Extends <a href="http://leafletjs.com/reference.html#polyline">Polyline</a>. Use <a href="http://leafletjs.com/reference.html#map-addlayer">Map#addLayer</a> to add it to the map.</p>

<p>Note that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points.</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Polygon</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[]&gt; <i>latlngs</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#polyline-options">Polyline options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Polygon(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.polygon(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a polygon object given an array of geographical points and optionally an options object (the same as for Polyline). You can also create a polygon with holes by passing an array of arrays of latlngs, with the first latlngs array representing the exterior ring while the remaining represent the holes inside.</td>
	</tr>
</tbody></table>

<p>Polygon the same options and methods as Polyline.</p>



<h2 id="multipolygon">L.MultiPolygon</h2>

<p>Extends <a href="http://leafletjs.com/reference.html#featuregroup">FeatureGroup</a> to allow creating multi-polygons (single layer that consists of several polygons that share styling/popup).</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.MultiPolygon</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[][]&gt; <i>latlngs</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#polyline-options">Polyline options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.MultiPolygon(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.multiPolygon(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a multi-polyline object given an array of latlngs arrays (one for each individual polygon) and optionally an options object (the same as for MultiPolyline).</td>
	</tr>
</tbody></table>

<h2 id="rectangle">L.Rectangle</h2>

<p>A class for drawing rectangle overlays on a map. Extends <a href="http://leafletjs.com/reference.html#polygon">Polygon</a>. Use <a href="http://leafletjs.com/reference.html#map-addlayer">Map#addLayer</a> to add it to the map.</p>

<h3>Usage example</h3>
<pre><code class="javascript"><span class="comment">// define rectangle geographical bounds</span>
<span class="keyword">var</span> bounds = [[<span class="number">54.559322</span>, -<span class="number">5.767822</span>], [<span class="number">56.1210604</span>, -<span class="number">3.021240</span>]];

<span class="comment">// create an orange rectangle</span>
L.rectangle(bounds, {color: <span class="string">"#ff7800"</span>, weight: <span class="number">1</span>}).addTo(map);

<span class="comment">// zoom the map to the rectangle bounds</span>
map.fitBounds(bounds);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Rectangle</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#path-options">Path options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Rectangle(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.rectangle(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a rectangle object with the given geographical bounds and optionally an options object.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<p>You can use <a href="http://leafletjs.com/reference.html#path-methods">Path methods</a> and additionally the following methods:</p>

<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>setBounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>bounds</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Redraws the rectangle with the passed bounds.</td>
	</tr>
</tbody></table>


<h2 id="circle">L.Circle</h2>

<p>A class for drawing circle overlays on a map. Extends <a href="http://leafletjs.com/reference.html#path">Path</a>. Use <a href="http://leafletjs.com/reference.html#map-addlayer">Map#addLayer</a> to add it to the map.</p>

<pre><code class="javascript">L.circle([<span class="number">50.5</span>, <span class="number">30.5</span>], <span class="number">200</span>).addTo(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Circle</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i></nobr>,
			<nobr>&lt;Number&gt; <i>radius</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#path-options">Path options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Circle(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.circle(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a circle object given a geographical point, a radius in meters and optionally an options object.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width200">Method</th>
		<th class="minwidth">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>getLatLng</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the current geographical position of the circle.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getRadius</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the current radius of a circle. Units are in meters.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the position of a circle to a new location.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setRadius</b>(
			<nobr>&lt;Number&gt; <i>radius</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the radius of a circle. Units are in meters.</td>
	</tr>
</tbody></table>



<h2 id="circlemarker">L.CircleMarker</h2>

<p>A circle of a fixed size with radius specified in pixels. Extends <a href="http://leafletjs.com/reference.html#circle">Circle</a>. Use <a href="http://leafletjs.com/reference.html#map-addlayer">Map#addLayer</a> to add it to the map.</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.CircleMarker</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#path-options">Path options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.CircleMarker(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.circleMarker(<span class="comment">…</span>)</code>
		</td>

		<td>Instantiates a circle marker given a geographical point and optionally an options object. The default radius is 10 and can be altered by passing a "radius" member in the path options object.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width200">Method</th>
		<th class="minwidth">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>setLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the position of a circle marker to a new location.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setRadius</b>(
			<nobr>&lt;Number&gt; <i>radius</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the radius of a circle marker. Units are in pixels.</td>
	</tr>
</tbody></table>



<h2 id="layergroup">L.LayerGroup</h2>

<p>Used to group several layers and handle them as one. If you add it to the map, any layers added or removed from the group will be added/removed on the map as well. Implements <a href="http://leafletjs.com/reference.html#ilayer">ILayer</a> interface.</p>

<pre><code class="javascript">L.layerGroup([marker1, marker2])
    .addLayer(polyline)
    .addTo(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.LayerGroup</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>[]&gt; <i>layers?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.LayerGroup(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.layerGroup(<span class="comment">…</span>)</code>
		</td>

		<td>Create a layer group, optionally given an initial set of layers.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width200">Method</th>
		<th class="minwidth">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the group of layers to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>addLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds a given layer to the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes a given layer from the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>clearLayers</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes all the layers from the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>eachLayer</b>(
			<nobr>&lt;Function&gt; <i>fn</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Iterates over the layers of the group, optionally specifying context of the iterator function.
<pre><code class="javascript">group.eachLayer(<span class="function"><span class="keyword">function</span> <span class="params">(layer)</span> {</span>
    layer.bindPopup(<span class="string">'Hello'</span>);
});</code></pre>
		</td>
	</tr>
</tbody></table>



<h2 id="featuregroup">L.FeatureGroup</h2>

<p>Extended <a href="http://leafletjs.com/reference.html#layergroup">LayerGroup</a> that also has mouse events (propagated from members of the group) and a shared bindPopup method. Implements <a href="http://leafletjs.com/reference.html#ilayer">ILayer</a> interface.</p>

<pre><code class="javascript">L.featureGroup([marker1, marker2, polyline])
    .bindPopup(<span class="string">'Hello world!'</span>)
    .on(<span class="string">'click'</span>, <span class="keyword">function</span>() { alert(<span class="string">'Clicked on a group!'</span>); })
    .addTo(map);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width300">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.FeatureGroup</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>[]&gt; <i>layers?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.FeatureGroup(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.featureGroup(<span class="comment">…</span>)</code>
		</td>

		<td>Create a layer group, optionally given an initial set of layers.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<p>Has all <a href="http://leafletjs.com/reference.html#layergroup">LayerGroup</a> methods and additionally:</p>

<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>bindPopup</b>(
			<nobr>&lt;String&gt; <i>htmlContent</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#popup-options">Popup options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Binds a popup with a particular HTML content to a click on any layer from the group that has a <code class="javascript">bindPopup</code> method.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getBounds</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td>Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setStyle</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#path-options">Path options</a>&gt; <i>style</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the given path options to each layer of the group that has a <code class="javascript">setStyle</code> method.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToFront</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the layer group to the top of all other layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bringToBack</b>()</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Brings the layer group to the bottom of all other layers.</td>
	</tr>
</tbody></table>

<h3>Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>click</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user clicks (or taps) the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dblclick</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user double-clicks (or double-taps) the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseover</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse enters the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mouseout</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the mouse leaves the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mousemove</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired while the mouse moves over the layers of the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contextmenu</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#mouse-event">MouseEvent</a></code>
		</td><td>Fired when the user right-clicks on one of the layers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layeradd</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#layer-event">LayerEvent</a></code>
		</td><td>Fired when a layer is added to the group.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layerremove</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#layer-event">LayerEvent</a></code>
		</td><td>Fired when a layer is removed from the map.</td>
	</tr>
</tbody></table>


<h2 id="geojson">L.GeoJSON</h2>

<p>Represents a <a href="http://geojson.org/geojson-spec.html">GeoJSON</a> layer. Allows you to parse GeoJSON data and display it on the map. Extends <a href="http://leafletjs.com/reference.html#featuregroup">FeatureGroup</a>.</p>

<pre><code class="javascript">L.geoJson(data, {
    style: <span class="function"><span class="keyword">function</span> <span class="params">(feature)</span> {</span>
        <span class="keyword">return</span> {color: feature.properties.color};
    },
    onEachFeature: <span class="function"><span class="keyword">function</span> <span class="params">(feature, layer)</span> {</span>
        layer.bindPopup(feature.properties.description);
    }
}).addTo(map);</code></pre>

<p>Each feature layer created by it gets a <code class="javascript">feature</code> property that links to the GeoJSON feature data the layer was created from (so that you can access its properties later).</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.GeoJSON</b>(
			<nobr>&lt;Object&gt; <i>geojson?</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#geojson-options">GeoJSON options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.GeoJSON(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.geoJson(<span class="comment">…</span>)</code>
		</td>

		<td>Creates a GeoJSON layer. Optionally accepts an object in <a href="http://geojson.org/geojson-spec.html">GeoJSON format</a> to display on the map (you can alternatively add it later with <code class="javascript">addData</code> method) and an options object.</td>
	</tr>
</tbody></table>

<h3 id="geojson-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Description</th>
	</tr>
	<tr id="geojson-pointtolayer">
		<td><code class="javascript"><b>pointToLayer</b>(
			<nobr>&lt;GeoJSON&gt; <i>featureData</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td>Function that will be used for creating layers for GeoJSON points (if not specified, simple markers will be created).</td>
	</tr>
	<tr id="geojson-style">
		<td><code class="javascript"><b>style</b>(
			<nobr>&lt;GeoJSON&gt; <i>featureData</i> )</nobr>
		</code></td>

		<td>Function that will be used to get style options for vector layers created for GeoJSON features.</td>
	</tr>
	<tr id="geojson-oneachfeature">
		<td><code class="javascript"><b>onEachFeature</b>(
			<nobr>&lt;GeoJSON&gt; <i>featureData</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td>Function that will be called on each created feature layer. Useful for attaching events and popups to features.</td>
	</tr>
	<tr id="geojson-filter">
		<td><code class="javascript"><b>filter</b>(
			<nobr>&lt;GeoJSON&gt; <i>featureData</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td>Function that will be used to decide whether to show a feature or not.</td>
	</tr>
</tbody></table>


<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th class="minwidth">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addData</b>(
			<nobr>&lt;GeoJSON&gt; <i>data</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Adds a GeoJSON object to the layer.</td>
	</tr>
	<tr id="geojson-setstyle">
		<td><code class="javascript"><b>setStyle</b>(
			<nobr>&lt;Function&gt; <i><a href="http://leafletjs.com/reference.html#geojson-style">style</a></i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Changes styles of GeoJSON vector layers with the given style function.</td>
	</tr>
	<tr id="geojson-resetstyle">
		<td><code class="javascript"><b>resetStyle</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#path">Path</a>&gt; <i>layer</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Resets the the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events.</td>
	</tr>
</tbody></table>

<h3>Static methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>geometryToLayer</b>(
			<nobr>&lt;GeoJSON&gt; <i>featureData</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#geojson-pointtolayer">Function</a>&gt; <i>pointToLayer?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#ilayer">ILayer</a></code></td>
		<td>Creates a layer from a given GeoJSON feature.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>coordsToLatlng</b>(
			<nobr>&lt;Array&gt; <i>coords</i></nobr>,
			<nobr>&lt;Boolean&gt; <i>reverse?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Creates a LatLng object from an array of 2 numbers (latitude, longitude) used in GeoJSON for points. If <code class="javascript">reverse</code> is set to <code class="javascript"><span class="literal">true</span></code>, the numbers will be interpreted as (longitude, latitude).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>coordsToLatlngs</b>(
			<nobr>&lt;Array&gt; <i>coords</i></nobr>,
			<nobr>&lt;Number&gt; <i>levelsDeep?</i></nobr>,
			<nobr>&lt;Boolean&gt; <i>reverse?</i> )</nobr>
		</code></td>

		<td><code class="javascript">Array</code></td>
		<td>Creates a multidimensional array of LatLng objects from a GeoJSON coordinates array. <code class="javascript">levelsDeep</code> specifies the nesting level (0 is for an array of points, 1 for an array of arrays of points, etc., 0 by default). If <code class="javascript">reverse</code> is set to <code class="javascript"><span class="literal">true</span></code>, the numbers will be interpreted as (longitude, latitude).</td>
	</tr>
</tbody></table>




<h2 id="latlng">L.LatLng</h2>

<p>Represents a geographical point with a certain latitude and longitude.</p>
<pre><code class="javascript"><span class="keyword">var</span> latlng = <span class="keyword">new</span> L.LatLng(<span class="number">50.5</span>, <span class="number">30.5</span>);</code></pre>

<p>All Leaflet methods that accept LatLng objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:</p>

<pre><code class="javascript">map.panTo([<span class="number">50</span>, <span class="number">30</span>]);
map.panTo(<span class="keyword">new</span> L.LatLng(<span class="number">50</span>, <span class="number">30</span>));</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.LatLng</b>(
			<nobr>&lt;Number&gt; <i>latitude</i></nobr>,
			<nobr>&lt;Number&gt; <i>longitude</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.LatLng(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.latLng(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.latLng([<span class="comment">…</span>])</code>
		</td>

		<td>Creates an object representing a geographical point with the given latitude and longitude.</td>
	</tr>
</tbody></table>

<h3>Properties</h3>

<table>
	<tbody><tr>
		<th class="width100">Property</th>
		<th class="width100">Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>lat</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td>Latitude in degrees.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>lng</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td>Longitude in degrees.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>distanceTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>otherLatlng</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>
		<td>Returns the distance (in meters) to the given LatLng calculated using the Haversine formula. See <a href="http://en.wikipedia.org/wiki/Haversine_formula">description on wikipedia</a></td>
	</tr>
	<tr>
		<td><code class="javascript"><b>equals</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>otherLatlng</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the given LatLng point is at the same position (within a small margin of error).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>toString</b>()</code></td>
		<td><code class="javascript">String</code></td>
		<td>Returns a string representation of the point (for debugging purposes).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>wrap</b>(
			<nobr>&lt;Number&gt; <i>left</i></nobr>,
			<nobr>&lt;Number&gt; <i>right</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns a new <code class="javascript">LatLng</code> object with the longitude wrapped around <code class="javascript">left</code> and <code class="javascript">right</code> boundaries (<code class="javascript"><span class="number">-180</span></code> to <code class="javascript"><span class="number">180</span></code> by default).</td>
	</tr>
</tbody></table>

<h3>Constants</h3>

<table>
	<tbody><tr>
		<th class="width100">Constant</th>
		<th class="width100">Type</th>
		<th class="width100">Value</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>DEG_TO_RAD</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript">Math.PI / <span class="number">180</span></code></td>
		<td>A multiplier for converting degrees into radians.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>RAD_TO_DEG</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">180</span> / Math.PI</code></td>
		<td>A multiplier for converting radians into degrees.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>MAX_MARGIN</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">1.0E-9</span></code></td>
		<td>Max margin of error for the equality check.</td>
	</tr>
</tbody></table>




<h2 id="latlngbounds">L.LatLngBounds</h2>

<p>Represents a rectangular geographical area on a map.</p>
<pre><code class="javascript"><span class="keyword">var</span> southWest = <span class="keyword">new</span> L.LatLng(<span class="number">40.712</span>, -<span class="number">74.227</span>),
    northEast = <span class="keyword">new</span> L.LatLng(<span class="number">40.774</span>, -<span class="number">74.125</span>),
    bounds = <span class="keyword">new</span> L.LatLngBounds(southWest, northEast);</code></pre>

<p>All Leaflet methods that accept LatLngBounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:</p>

<pre><code class="javascript">map.fitBounds([
    [<span class="number">40.712</span>, -<span class="number">74.227</span>],
    [<span class="number">40.774</span>, -<span class="number">74.125</span>]
]);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>
			<code class="javascript"><b>L.LatLngBounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>southWest</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>northEast</i></nobr> )</code>
		</td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.LatLngBounds(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.latLngBounds(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.latLngBounds([<span class="comment">…</span>])</code>
		</td>

		<td>Creates a LatLngBounds object by defining south-west and north-east corners of the rectangle.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.LatLngBounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>[]&gt; <i>latlngs</i> )</nobr>
		</code></td>
		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.LatLngBounds(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.latLngBounds(<span class="comment">…</span>)</code>
		</td>
		<td>Creates a LatLngBounds object defined by the geographical points it contains. Very useful for zooming the map to fit a particular set of locations with <a href="http://leafletjs.com/reference.html#map-fitbounds">fitBounds</a>.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width300">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>extend</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>|<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Extends the bounds to contain the given point or bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getSouthWest</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the south-west point of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getNorthEast</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the north-east point of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getNorthWest</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the north-west point of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getSouthEast</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the south-east point of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getWest</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the west longitude of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getSouth</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the south latitude of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getEast</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the east longitude of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getNorth</b>()</code></td>
		<td><code class="javascript">Number</code></td>
		<td>Returns the north latitude of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getCenter</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Returns the center point of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contains</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>otherBounds</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle contains the given one.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contains</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle contains the given point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>intersects</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>otherBounds</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle intersects the given bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>equals</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a>&gt; <i>otherBounds</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle is equivalent (within a small margin of error) to the given bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>toBBoxString</b>()</code></td>
		<td><code class="javascript">String</code></td>
		<td>Returns a string with bounding box coordinates in a <code class="javascript"><span class="string">'southwest_lng,southwest_lat,northeast_lng,northeast_lat'</span></code> format. Useful for sending requests to web services that return geo data.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>pad</b>(
			<nobr>&lt;Number&gt; <i>bufferRatio</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td>Returns bigger bounds created by extending the current bounds by a given percentage in each direction.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>isValid</b>()
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the bounds are properly initialized.</td>
	</tr>
</tbody></table>




<h2 id="point">L.Point</h2>

<p>Represents a point with x and y coordinates in pixels.</p>

<pre><code class="javascript"><span class="keyword">var</span> point = <span class="keyword">new</span> L.Point(<span class="number">200</span>, <span class="number">300</span>);</code></pre>

<p>All Leaflet methods and options that accept Point objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:</p>

<pre><code class="javascript">map.panBy([<span class="number">200</span>, <span class="number">300</span>]);
map.panBy(<span class="keyword">new</span> L.Point(<span class="number">200</span>, <span class="number">300</span>));</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Point</b>(
			<nobr>&lt;Number&gt; <i>x</i>, &lt;Number&gt; <i>y</i></nobr>,
			<nobr>&lt;Boolean&gt; <i>round?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Point(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.point(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.point([<span class="comment">…</span>])</code>
		</td>

		<td>Creates a Point object with the given <code class="javascript">x</code> and <code class="javascript">y</code> coordinates. If optional <code class="javascript">round</code> is set to <code class="javascript"><span class="literal">true</span></code>, rounds the <code class="javascript">x</code> and <code class="javascript">y</code> values.</td>
	</tr>
</tbody></table>

<h3>Properties</h3>

<table>
	<tbody><tr>
		<th class="width100">Property</th>
		<th class="width100">Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>x</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td>The x coordinate.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>y</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td>The y coordinate.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>add</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>otherPoint</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the result of addition of the current and the given points.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>subtract</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>otherPoint</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the result of subtraction of the given point from the current.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>multiplyBy</b>(
			<nobr>&lt;Number&gt; <i>number</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the result of multiplication of the current point by the given number.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>divideBy</b>(
			<nobr>&lt;Number&gt; <i>number</i></nobr>,
			<nobr>&lt;Boolean&gt; <i>round?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the result of division of the current point by the given number. If optional <code class="javascript">round</code> is set to <code class="javascript"><span class="literal">true</span></code>, returns a rounded result.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>distanceTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>otherPoint</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>
		<td>Returns the distance between the current and the given points.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>clone</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns a copy of the current point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>round</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns a copy of the current point with rounded coordinates.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>equals</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>otherPoint</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the given point has the same coordinates.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>toString</b>()</code></td>
		<td><code class="javascript">String</code></td>
		<td>Returns a string representation of the point for debugging purposes.</td>
	</tr>
</tbody></table>



<h2 id="bounds">L.Bounds</h2>

<p>Represents a rectangular area in pixel coordinates.</p>
<pre><code class="javascript"><span class="keyword">var</span> p1 = <span class="keyword">new</span> L.Point(<span class="number">10</span>, <span class="number">10</span>),
    p2 = <span class="keyword">new</span> L.Point(<span class="number">40</span>, <span class="number">60</span>),
    bounds = <span class="keyword">new</span> L.Bounds(p1, p2);</code></pre>

<p>All Leaflet methods that accept Bounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:</p>

<pre><code class="javascript">otherBounds.intersects([[<span class="number">10</span>, <span class="number">10</span>], [<span class="number">40</span>, <span class="number">60</span>]]);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Bounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>topLeft</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>bottomRight</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Bounds(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.bounds(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.bounds([<span class="comment">…</span>])</code>
		</td>

		<td>Creates a Bounds object from two coordinates (usually top-left and bottom-right corners).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Bounds</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>[]&gt; <i>points</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Bounds(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.bounds(<span class="comment">…</span>)</code>
		</td>

		<td>Creates a Bounds object defined by the points it contains.</td>
	</tr>
</tbody></table>

<h3>Properties</h3>

<table>
	<tbody><tr>
		<th class="width100">Property</th>
		<th class="width100">Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>min</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>The top left corner of the rectangle.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>max</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>The bottom right corner of the rectangle.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width250">Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>extend</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td>-</td>
		<td>Extends the bounds to contain the given point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getCenter</b>()</code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the center point of the bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contains</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#bounds">Bounds</a>&gt; <i>otherBounds</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle contains the given one.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>contains</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle contains the given point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>intersects</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#bounds">Bounds</a>&gt; <i>otherBounds</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the rectangle intersects the given bounds.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>isValid</b>()</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the bounds are properly initialized.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getSize</b>()</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the size of the given bounds.</td>
	</tr>
</tbody></table>


<h2 id="icon">L.Icon</h2>

<p>Represents an icon to provide when creating a marker.</p>

<pre><code class="javascript"><span class="keyword">var</span> myIcon = L.icon({
    iconUrl: <span class="string">'my-icon.png'</span>,
    iconRetinaUrl: <span class="string">'my-icon@2x.png'</span>,
    iconSize: [<span class="number">38</span>, <span class="number">95</span>],
    iconAnchor: [<span class="number">22</span>, <span class="number">94</span>],
    popupAnchor: [-<span class="number">3</span>, -<span class="number">76</span>],
    shadowUrl: <span class="string">'my-icon-shadow.png'</span>,
    shadowRetinaUrl: <span class="string">'my-icon-shadow@2x.png'</span>,
    shadowSize: [<span class="number">68</span>, <span class="number">95</span>],
    shadowAnchor: [<span class="number">22</span>, <span class="number">94</span>]
});

L.marker([<span class="number">50.505</span>, <span class="number">30.57</span>], {icon: myIcon}).addTo(map);</code></pre>

<p><code class="javascript">L.Icon.Default</code> extends <code class="javascript">L.Icon</code> and is the blue icon Leaflet uses for markers by default.</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Icon</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#icon-options">Icon options</a>&gt; <i>options</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Icon(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.icon(<span class="comment">…</span>)</code>
		</td>

		<td>Creates an icon instance with the given options.</td>
	</tr>
</tbody></table>

<h3 id="icon-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>iconUrl</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>(required) The URL to the icon image (absolute or relative to your script path).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>iconRetinaUrl</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>The URL to a retina sized version of the icon image (absolute or relative to your script path). Used for Retina screen devices.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>iconSize</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>Size of the icon image in pixels.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>iconAnchor</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>The coordinates of the "tip" of the icon (relative to its top left corner). The icon will be aligned so that this point is at the marker's geographical location. Centered by default if size is specified, also can be set in CSS with negative margins.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>shadowUrl</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>The URL to the icon shadow image. If not specified, no shadow image will be created.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>shadowRetinaUrl</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>The URL to the retina sized version of the icon shadow image. If not specified, no shadow image will be created. Used for Retina screen devices.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>shadowSize</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>Size of the shadow image in pixels.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>shadowAnchor</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>The coordinates of the "tip" of the shadow (relative to its top left corner) (the same as <code class="javascript">iconAnchor</code> if not specified).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>popupAnchor</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>The coordinates of the point from which popups will "open", relative to the icon anchor.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>className</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>A custom class name to assign to both icon and shadow images. Empty by default.</td>
	</tr>
</tbody></table>


<h2 id="divicon">L.DivIcon</h2>

<p>Represents a lightweight icon for markers that uses a simple <code class="javascript">div</code> element instead of an image.</p>

<pre><code class="javascript"><span class="keyword">var</span> myIcon = L.divIcon({className: <span class="string">'my-div-icon'</span>});
<span class="comment">// you can set .my-div-icon styles in CSS</span>

L.marker([<span class="number">50.505</span>, <span class="number">30.57</span>], {icon: myIcon}).addTo(map);</code></pre>

<p>By default, it has a <code class="javascript"><span class="string">'leaflet-div-icon'</span></code> class and is styled as a little white square with a shadow.</p>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.DivIcon</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#divicon-options">DivIcon options</a>&gt; <i>options</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.DivIcon(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.divIcon(<span class="comment">…</span>)</code>
		</td>

		<td>Creates a div icon instance with the given options.</td>
	</tr>
</tbody></table>

<h3 id="divicon-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>iconSize</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>Size of the icon in pixels. Can be also set through CSS.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>iconAnchor</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code>
		</td><td>The coordinates of the "tip" of the icon (relative to its top left corner). The icon will be aligned so that this point is at the marker's geographical location. Centered by default if size is specified, also can be set in CSS with negative margins.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>className</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>A custom class name to assign to the icon. <code class="javascript"><span class="string">'leaflet-div-icon'</span></code> by default.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>html</b></code></td>
		<td><code class="javascript">String</code>
		</td><td>A custom HTML code to put inside the div element, empty by default.</td>
	</tr>
</tbody></table>




<h2 id="control">L.Control</h2>

<p>The base class for all Leaflet controls. Implements <a href="http://leafletjs.com/reference.html#icontrol">IControl</a> interface. You can add controls to the map like this:</p>

<pre><code class="javascript">control.addTo(map);
<span class="comment">// the same as</span>
map.addControl(control);</code></pre>

<h3>Constructor</h3>
<table>
	<tbody><tr>
		<th class="width300">Constructor</th>
		<th class="minwidth">Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Control</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-options">Control options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Control(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.control(<span class="comment">…</span>)</code>
		</td>

		<td>Creates a control with the given options.</td>
	</tr>
</tbody></table>

<h3>Options</h3>
<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>position</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'topright'</span></code></td>
		<td>The initial position of the control (one of the map corners). See <a href="http://leafletjs.com/reference.html#control-positions">control positions</a>.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>
<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>setPosition</b>(
			<nobr>&lt;String&gt; <i>position</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the position of the control. See <a href="http://leafletjs.com/reference.html#control-positions">control positions</a>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getPosition</b>()</code></td>
		<td><code class="javascript">String</code></td>
		<td>Returns the current position of the control.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>addTo</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds the control to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeFrom</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes the control from the map.</td>
	</tr>
</tbody></table>

<h3 id="control-positions">Control Positions</h3>

<p>Control positions (map corner to put a control to) are set using strings. Margins between controls and the map border are set with CSS, so that you can easily override them.</p>

<table>
	<tbody><tr>
		<th class="minwidth">Position</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><span class="string">'topleft'</span></code></td>
		<td>Top left of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><span class="string">'topright'</span></code></td>
		<td>Top right of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><span class="string">'bottomleft'</span></code></td>
		<td>Bottom left of the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><span class="string">'bottomright'</span></code></td>
		<td>Bottom right of the map.</td>
	</tr>
</tbody></table>


<h2 id="control-zoom">L.Control.Zoom</h2>

<p>A basic zoom control with two buttons (zoom in and zoom out). It is put on the map by default unless you set its <code class="javascript">zoomControl</code> option to <code class="javascript"><span class="literal">false</span></code>. Extends <a href="http://leafletjs.com/reference.html#control">Control</a>.</p>

<h3>Constructor</h3>
<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th class="width200">Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Control.Zoom</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-zoom-options">Control.Zoom options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Control.Zoom(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.control.zoom(<span class="comment">…</span>)</code>
		</td>

		<td>Creates a zoom control.</td>
	</tr>
</tbody></table>

<h3 id="control-zoom-options">Options</h3>
<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>position</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'topleft'</span></code></td>
		<td>The position of the control (one of the map corners). See <a href="http://leafletjs.com/reference.html#control-positions">control positions</a>.</td>
	</tr>
</tbody></table>



<h2 id="control-attribution">L.Control.Attribution</h2>

<p>The attribution control allows you to display attribution data in a small text box on a map. It is put on the map by default unless you set its <code class="javascript">attributionControl</code> option to <code class="javascript"><span class="literal">false</span></code>, and it fetches attribution texts from layers with <code class="javascript">getAttribution</code> method automatically. Extends <a href="http://leafletjs.com/reference.html#control">Control</a>.</p>

<h3>Constructor</h3>
<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Control.Attribution</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-attribution-options">Control.Attribution options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Control.Attribution(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.control.attribution(<span class="comment">…</span>)</code>
		</td>

		<td>Creates an attribution control.</td>
	</tr>
</tbody></table>

<h3 id="control-attribution-options">Options</h3>
<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>position</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'bottomright'</span></code></td>
		<td>The position of the control (one of the map corners). See <a href="http://leafletjs.com/reference.html#control-positions">control positions</a>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>prefix</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'Powered by Leaflet'</span></code></td>
		<td>The HTML text shown before the attributions. Pass <code class="javascript"><span class="literal">false</span></code> to disable.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>
<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>setPrefix</b>(
			<nobr>&lt;String&gt; <i>prefix</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Sets the text before the attributions.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>addAttribution</b>(
			<nobr>&lt;String&gt; <i>text</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds an attribution text (e.g. <code class="javascript"><span class="string">'Vector data &amp;copy; CloudMade'</span></code>).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeAttribution</b>(
			<nobr>&lt;String&gt; <i>text</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes an attribution text.</td>
	</tr>
</tbody></table>


<h2 id="control-layers">L.Control.Layers</h2>

<p>The layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the <a href="http://leafletjs.com/examples/layers-control.html">detailed example</a>). Extends <a href="http://leafletjs.com/reference.html#control">Control</a>.</p>

<pre><code class="javascript"><span class="keyword">var</span> baseLayers = {
    <span class="string">"CloudMade"</span>: cloudmade,
    <span class="string">"OpenStreetMap"</span>: osm
};

<span class="keyword">var</span> overlays = {
    <span class="string">"Marker"</span>: marker,
    <span class="string">"Roads"</span>: roadsLayer
};

L.control.layers(baseLayers, overlays).addTo(map);</code></pre>

<h3>Constructor</h3>
<table>
	<tbody><tr>
		<th>Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Control.Layers</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-layers-config">Layer Config</a>&gt; <i>baseLayers?</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-layers-config">Layer Config</a>&gt; <i>overlays?</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-layers-options">Control.Layers options</a>&gt; <i>options?</i> )</nobr>
		</code></td>
		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Control.Layers(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.control.layers(<span class="comment">…</span>)</code>
		</td>
		<td>Creates an attribution control with the given layers. Base layers will be switched with radio buttons, while overlays will be switched with checkboxes.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>
<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addBaseLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i></nobr>,
			<nobr>&lt;String&gt; <i>name</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds a base layer (radio button entry) with the given name to the control.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>addOverlay</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i></nobr>,
			<nobr>&lt;String&gt; <i>name</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds an overlay (checkbox entry) with the given name to the control.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeLayer</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#ilayer">ILayer</a>&gt; <i>layer</i> )</nobr>
		</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Remove the given layer from the control.</td>
	</tr>
</tbody></table>

<h3 id="control-layers-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>position</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'topright'</span></code></td>
		<td>The position of the control (one of the map corners). See <a href="http://leafletjs.com/reference.html#control-positions">control positions</a>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>collapsed</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, the control will be collapsed into an icon and expanded on mouse hover or touch.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>autoZIndex</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off.</td>
	</tr>
</tbody></table>


<h3 id="control-layers-config">Layer Config</h3>

<p>An object literal with layer names as keys and layer objects as values:</p>

<pre><code class="javascript">{
    <span class="string">"&lt;someName1&gt;"</span>: layer1,
    <span class="string">"&lt;someName2&gt;"</span>: layer2
}</code></pre>

<p>The layer names can contain HTML, which allows you to add additional styling to the items:</p>

<pre><code class="javascript">{<span class="string">"&lt;img src='my-layer-icon' /&gt; &lt;span class='my-layer-item'&gt;My Layer&lt;/span&gt;"</span>: myLayer}</code></pre>


<h3>Events</h3>

<p>You can subscribe to the following events on the map object using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>baselayerchange</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#layer-event">LayerEvent</a></code>
		</td><td>Fired when the base layer is changed through the control.</td>
	</tr>
</tbody></table>


<h2 id="control-scale">L.Control.Scale</h2>

<p>A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Implements <a href="http://leafletjs.com/reference.html#icontrol">IControl</a> interface.</p>

<pre><code class="javascript">L.control.scale().addTo(map);</code></pre>

<h3>Constructor</h3>
<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Control.Scale</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#control-scale-options">Control.Scale options</a>&gt; <i>options?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Control.Scale(<span class="comment">…</span>)</code><br>
			<code class="factory-usage">L.control.scale(<span class="comment">…</span>)</code>
		</td>

		<td>Creates an scale control with the given options.</td>
	</tr>
</tbody></table>

<h3 id="control-scale-options">Options</h3>

<table>
	<tbody><tr>
		<th>Option</th>
		<th>Type</th>
		<th>Default</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>position</b></code></td>
		<td><code class="javascript">String</code></td>
		<td><code class="javascript"><span class="string">'bottomleft'</span></code></td>
		<td>The position of the control (one of the map corners). See <a href="http://leafletjs.com/reference.html#control-positions">control positions</a>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>maxWidth</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td><code class="javascript"><span class="number">100</span></code></td>
		<td>Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>metric</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether to show the metric scale line (m/km).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>imperial</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code></td>
		<td>Whether to show the imperial scale line (mi/ft).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>updateWhenIdle</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">false</span></code></td>
		<td>If <code class="javascript"><span class="literal">true</span></code>, the control is updated on <code class="javascript">moveend</code>, otherwise it's always up-to-date (updated on <code class="javascript">move</code>).</td>
	</tr>
</tbody></table>



<h2 id="events">Events methods</h2>

<p>A set of methods shared between event-powered classes (like Map). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map <code class="javascript"><span class="string">'fire'</span></code> event).</p>

<h3>Example</h3>

<pre><code class="javascript">map.on(<span class="string">'click'</span>, <span class="keyword">function</span>(e) {
    alert(e.latlng);
});</code></pre>

<p>Leaflet deals with event listeners by reference, so if you want to add a listener and then remove it, define it as a function:</p>

<pre><code class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span><span class="params">(e)</span> {</span> ... }

map.on(<span class="string">'click'</span>, onClick);
map.off(<span class="string">'click'</span>, onClick);</code></pre>

<h3>Methods</h3>
<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addEventListener</b>(
			<nobr>&lt;String&gt; <i>type</i></nobr>,
			<nobr>&lt;Function&gt; <i>fn</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds a listener function (<code class="javascript">fn</code>) to a particular event type of the object. You can optionally specify the context of the listener (object the <code class="javascript"><span class="keyword">this</span></code> keyword will point to). You can also pass several space-separated types (e.g. <code class="javascript"><span class="string">'click dblclick'</span></code>).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>addEventListener</b>(
			<nobr>&lt;Object&gt; <i>eventMap</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds a set of type/listener pairs, e.g. <code class="javascript">{click: onClick, mousemove: onMouseMove}</code></td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeEventListener</b>(
			<nobr>&lt;String&gt; <i>type</i></nobr>,
			<nobr>&lt;Function&gt; <i>fn?</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeEventListener</b>(
			<nobr>&lt;Object&gt; <i>eventMap</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes a set of type/listener pairs.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>hasEventListeners</b>(
			<nobr>&lt;String&gt; <i>type</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if a particular event type has some listeners attached to it.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>fireEvent</b>(
			<nobr>&lt;String&gt; <i>type</i></nobr>,
			<nobr>&lt;Object&gt; <i>data?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Fires an event of the specified type. You can optionally provide an data object — the first argument of the listener function will contain its properties.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>on</b>( … )</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Alias to <code class="javascript">addEventListener</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>off</b>( … )</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Alias to <code class="javascript">removeEventListener</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>fire</b>( … )</code></td>
		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Alias to <code class="javascript">fireEvent</code>.</td>
	</tr>
</tbody></table>


<h2 id="event-objects">Event objects</h2>

<p>Event object is an object that you recieve as an argument in a listener function when some event is fired, containing useful information about that event. For example:</p>

<pre><code class="javascript">map.on(<span class="string">'click'</span>, <span class="keyword">function</span>(e) {
    alert(e.latlng); <span class="comment">// e is an event object (MouseEvent in this case)</span>
});</code></pre>

<h3 id="event">Event</h3>

<p>The base event object. All other event objects contain these properties too.</p>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>type</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>The event type (e.g. <code class="javascript"><span class="string">'click'</span></code>).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>target</b></code></td>
		<td><code class="javascript">Object</code></td>
		<td>The object that fired the event.</td>
	</tr>
</tbody></table>

<h3 id="mouse-event">MouseEvent</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th>type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>latlng</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>The geographical point where the mouse event occured.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>layerPoint</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Pixel coordinates of the point where the mouse event occured relative to the map layer.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>containerPoint</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Pixel coordinates of the point where the mouse event occured relative to the map сontainer.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>originalEvent</b></code></td>
		<td><code class="javascript">DOMMouseEvent</code></td>
		<td>The original DOM mouse event fired by the browser.</td>
	</tr>
</tbody></table>

<h3 id="location-event">LocationEvent</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th>type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>latlng</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>Detected geographical location of the user.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bounds</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlngbounds">LatLngBounds</a></code></td>
		<td>Geographical bounds of the area user is located in (with respect to the accuracy of location).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>accuracy</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td>Accuracy of location in meters.</td>
	</tr>
</tbody></table>

<h3 id="error-event">ErrorEvent</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>message</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>Error message.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>code</b></code></td>
		<td><code class="javascript">Number</code></td>
		<td>Error code (if applicable).</td>
	</tr>
</tbody></table>

<h3 id="layer-event">LayerEvent</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>layer</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#ilayer">ILayer</a></code></td>
		<td>The layer that was added or removed.</td>
	</tr>
</tbody></table>

<h3 id="tile-event">TileEvent</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>tile</b></code></td>
		<td><code class="javascript">HTMLElement</code></td>
		<td>The tile element (image).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>url</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>The source URL of the tile.</td>
	</tr>
</tbody></table>

<h3 id="geojson-event">GeoJSON event</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>layer</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#ilayer">ILayer</a></code></td>
		<td>The layer for the GeoJSON feature that is being added to the map.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>properties</b></code></td>
		<td><code class="javascript">Object</code></td>
		<td>GeoJSON properties of the feature.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>geometryType</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>GeoJSON geometry type of the feature.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>id</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>GeoJSON ID of the feature (if present).</td>
	</tr>
</tbody></table>

<h3 id="popup-event">Popup event</h3>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>popup</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#popup">Popup</a></code></td>
		<td>The popup that was opened or closed.</td>
	</tr>
</tbody></table>

<!-- <h3>TileEvent</h3> -->



<h2 id="class">L.Class</h2>

<p><code class="javascript">L.Class</code> powers the OOP facilities of Leaflet and is used to create almost all of the Leaflet classes documented here.</p>
<p>In addition to implementing a simple classical inheritance model, it introduces several special properties for convenient code organization — <code class="javascript">options</code>, <code class="javascript">includes</code> and <code class="javascript">statics</code>.</p>

<pre><code class="javascript"><span class="keyword">var</span> MyClass = L.Class.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">(greeter)</span> {</span>
        <span class="keyword">this</span>.greeter = greeter;
        <span class="comment">// class constructor</span>
    },

    greet: <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> {</span>
        alert(<span class="keyword">this</span>.greeter + <span class="string">', '</span> + name)
    }
});

<span class="comment">// create instance of MyClass, passing "Hello" to the constructor</span>
<span class="keyword">var</span> a = <span class="keyword">new</span> MyClass(<span class="string">"Hello"</span>);

<span class="comment">// call greet method, alerting "Hello, World"</span>
a.greet(<span class="string">"World"</span>);
</code></pre>

<h3>Inheritance</h3>

<p>You use <code class="javascript">L.Class.extend</code> to define new classes, but you can use the same method on any class to inherit from it:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyChildClass = MyClass.extend({
    <span class="comment">// ... new properties and methods</span>
});</code></pre>

<p>This will create a class that inherits all methods and properties of the parent class (through a proper prototype chain), adding or overriding the ones you pass to <code class="javascript">extend</code>. It will also properly react to <code class="javascript">instanceof</code>:</p>

<pre><code class="javascript"><span class="keyword">var</span> a = <span class="keyword">new</span> MyChildClass();
a <span class="keyword">instanceof</span> MyChildClass; <span class="comment">// true</span>
a <span class="keyword">instanceof</span> MyClass; <span class="comment">// true</span>
</code></pre>

<p>You can call parent methods (including constructor) from corresponding child ones (as you do with <code class="javascript">super</code> calls in other languages) by accessing parent class prototype and using JavaScript's <code class="javascript">call</code> or <code class="javascript">apply</code>:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyChildClass = MyClass.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        MyClass.prototype.initialize.call(<span class="string">"Yo"</span>);
    },

    greet: <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> {</span>
        MyClass.prototype.greet.call(<span class="keyword">this</span>, <span class="string">'bro '</span> + name + <span class="string">'!'</span>);
    }
});

<span class="keyword">var</span> a = <span class="keyword">new</span> MyChildClass();
a.greet(<span class="string">'Jason'</span>); <span class="comment">// alerts "Yo, bro Jason!"</span></code></pre>

<h3 id="class-options">Options</h3>

<p><code class="javascript">options</code> is a special property that unlike other objects that you pass to <code class="javascript">extend</code> will be merged with the parent one instead of overriding it completely, which makes managing configuration of objects and default values convenient:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyClass = L.Class.extend({
    options: {
        myOption1: <span class="string">'foo'</span>,
        myOption2: <span class="string">'bar'</span>
    }
});

<span class="keyword">var</span> MyChildClass = L.Class.extend({
    options: {
        myOption1: <span class="string">'baz'</span>,
        myOption3: <span class="number">5</span>
    }
});

<span class="keyword">var</span> a = <span class="keyword">new</span> MyChildClass();
a.options.myOption1; <span class="comment">// 'baz'</span>
a.options.myOption2; <span class="comment">// 'bar'</span>
a.options.myOption3; <span class="comment">// 5</span></code></pre>

<p>There's also <code class="javascript">L.Util.setOptions</code>, a method for conveniently merging options passed to constructor with the defauls defines in the class:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyClass = L.Class.extend({
    options: {
        foo: <span class="string">'bar'</span>,
        bla: <span class="number">5</span>
    },

    initialize: <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> {</span>
        L.Util.setOptions(<span class="keyword">this</span>, options);
        ...
    }
});

<span class="keyword">var</span> a = <span class="keyword">new</span> MyClass({bla: <span class="number">10</span>});
a.options; <span class="comment">// {foo: 'bar', bla: 10}</span></code></pre>

<h3>Includes</h3>

<p><code class="javascript">includes</code> is a special class property that merges all specified objects into the class (such objects are called mixins). A good example of this is <code class="javascript">L.Mixin.Events</code> that <a href="http://leafletjs.com/reference.html#events">event-related methods</a> like <code class="javascript">on</code>, <code class="javascript">off</code> and <code class="javascript">fire</code> to the class.</p>

<pre><code class="javascript"> <span class="keyword">var</span> MyMixin = {
    foo: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span> ... },
    bar: <span class="number">5</span>
};

<span class="keyword">var</span> MyClass = L.Class.extend({
    includes: MyMixin
});

<span class="keyword">var</span> a = <span class="keyword">new</span> MyClass();
a.foo();</code></pre>

<p>You can also do such includes in runtime with the <code class="javascript">include</code> method:</p>

<pre><code class="javascript"><b>MyClass.include</b>(MyMixin);</code></pre>

<h3>Statics</h3>

<p><code class="javascript">statics</code> is just a convenience property that injects specified object properties as the static properties of the class, useful for defining constants:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyClass = L.Class.extend({
    statics: {
        FOO: <span class="string">'bar'</span>,
        BLA: <span class="number">5</span>
    }
});

MyClass.FOO; <span class="comment">// 'bar'</span></code></pre>


<h3>Class Factories</h3>

<p>You may have noticed that you can create Leaflet class instances in two ways — using the <code class="javascript">new</code> keyword, or using lowercase factory method:</p>

<pre><code class="javascript"><span class="keyword">new</span> L.Map(<span class="string">'map'</span>);
L.map(<span class="string">'map'</span>);</code></pre>

<p>The second way is implemented very easily, and you can do this for your own classes:</p>

<pre><code class="javascript">L.map = <span class="function"><span class="keyword">function</span> <span class="params">(id, options)</span> {</span>
    <span class="keyword">return</span> <span class="keyword">new</span> L.Map(id, options);
};</code></pre>


<h3>Constructor Hooks</h3>

<p>If you're a plugin developer, you often need to add additional initialization code to existing classes (e.g. editing hooks for <code class="javascript">L.Polyline</code>). Leaflet comes with a way to do it easily using the <code class="javascript">addInitHook</code> method:</p>

<pre><code class="javascript">MyClass.addInitHook(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="comment">// ... do something in constructor additionally</span>
    <span class="comment">// e.g. add event listeners, set custom properties etc.</span>
});</code></pre>

<p>You can also use the following shortcut when you just need to make one additional method call:</p>

<pre><code class="javascript">MyClass.addInitHook(<span class="string">'methodName'</span>, arg1, arg2, …);</code></pre>


<h2 id="browser">L.Browser</h2>

<p>A namespace with properties for browser/feature detection used by Leaflet internally.</p>

<pre><code class="javascript"><span class="keyword">if</span> (L.Browser.ie6) {
    alert(<span class="string">'Upgrade your browser, dude!'</span>);
}</code></pre>

<table>
	<tbody><tr>
		<th class="width100">property</th>
		<th class="width100">type</th>
		<th>description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>ie</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for all Internet Explorer versions.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>ie6</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for Internet Explorer 6.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>ie7</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for Internet Explorer 7.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>webkit</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for webkit-based browsers like Chrome and Safari (including mobile versions).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>webkit3d</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for webkit-based browsers that support CSS 3D transformations.</td>
	</tr>
	<!--<tr>
		<td><code><b>gecko</b></code></td>
		<td><code>Boolean</code></td>
		<td><code><span class="literal">true</span></code> for Gecko-based browsers like Firefox and Mozilla.</td>
	</tr>
	<tr>
		<td><code><b>opera</b></code></td>
		<td><code>Boolean</code></td>
		<td><code><span class="literal">true</span></code> for Opera.</td>
	</tr>-->
	<tr>
		<td><code class="javascript"><b>android</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for Android mobile browser.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>android23</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for old Android stock browsers (2 and 3).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mobile</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for modern mobile browsers (including iOS Safari and different Android browsers).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mobileWebkit</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for mobile webkit-based browsers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>mobileOpera</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for mobile Opera.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>touch</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for all browsers on touch devices.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>msTouch</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for browsers with Microsoft touch model (e.g. IE10).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>retina</b></code></td>
		<td><code class="javascript">Boolean</code></td>
		<td><code class="javascript"><span class="literal">true</span></code> for devices with Retina screens.</td>
	</tr>
</tbody></table>


<h2 id="util">L.Util</h2>

<p>Various utility functions, used by Leaflet internally.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>extend</b>(
			<nobr>&lt;Object&gt; <i>dest</i></nobr>,
			<nobr>&lt;Object&gt; <i>src?..</i> )</nobr>
		</code></td>

		<td><code class="javascript">Object</code></td>
		<td>Merges the properties of the <code class="javascript">src</code> object (or multiple objects) into <code class="javascript">dest</code> object and returns the latter. Has an <code class="javascript">L.extend</code> shortcut.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>bind</b>(
			<nobr>&lt;Function&gt; <i>fn</i></nobr>,
			<nobr>&lt;Object&gt; <i>obj</i> )</nobr>
		</code></td>

		<td><code class="javascript">Function</code></td>
		<td>Returns a function which executes function <code class="javascript">fn</code> with the given scope <code class="javascript">obj</code> (so that <code class="javascript"><span class="keyword">this</span></code> keyword refers to <code class="javascript">obj</code> inside the function code). Has an <code class="javascript">L.bind</code> shortcut.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>stamp</b>( &lt;Object&gt; <i>obj</i> )<nobr></nobr></code></td>
		<td><code class="javascript">String</code></td>
		<td>Applies a unique key to the object and returns that key. Has an <code class="javascript">L.stamp</code> shortcut.</td>
	</tr>
	<!-- TODO Commented out for the time being:
	https://github.com/Leaflet/Leaflet/pull/793#discussion_r1134904
	<tr>
		<td><code><b>requestAnimFrame</b>()</code></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td><code><b>cancelAnimFrame</b>()</code></td>
		<td></td>
		<td></td>
	</tr>
	-->
	<tr>
		<td><code class="javascript"><b>limitExecByInterval</b>(
			<nobr>&lt;Function&gt; <i>fn</i></nobr>,
			<nobr>&lt;Number&gt; <i>time</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>

		<td><code class="javascript">Function</code></td>
		<td>Returns a wrapper around the function <code class="javascript">fn</code> that makes sure it's called not more often than a certain time interval <code class="javascript">time</code>, but as fast as possible otherwise (for example, it is used for checking and requesting new tiles while dragging the map), optionally passing the scope (<code class="javascript">context</code>) in which the function will be called.</td>
	</tr>

	<tr>
		<td><code class="javascript"><b>falseFn</b>()</code></td>
		<td><code class="javascript">Function</code></td>
		<td>Returns a function which always returns <code class="javascript"><span class="literal">false</span></code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>formatNum</b>(
			<nobr>&lt;Number&gt; <i>num</i></nobr>,
			<nobr>&lt;Number&gt; <i>digits</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>
		<td>Returns the number <code class="javascript">num</code> rounded to <code class="javascript">digits</code> decimals.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>splitWords</b>(
			<nobr>&lt;String&gt; <i>str</i> )</nobr>
		</code></td>

		<td><code class="javascript">String[]</code></td>
		<td>Trims and splits the string on whitespace and returns the array of parts.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setOptions</b>(
			<nobr>&lt;Object&gt; <i>obj</i></nobr>,
			<nobr>&lt;Object&gt; <i>options</i> )</nobr>
		</code></td>

		<td><code class="javascript">Object</code></td>
		<td>Merges the given properties to the <code class="javascript">options</code> of the <code class="javascript">obj</code> object, returning the resulting options. See <a href="http://leafletjs.com/reference.html#class-options">Class options</a>. Has an <code class="javascript">L.setOptions</code> shortcut.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getParamString</b>(
			<nobr>&lt;Object&gt; <i>obj</i> )</nobr>
		</code></td>

		<td><code class="javascript">String</code></td>
		<td>Converts an object into a parameter URL string, e.g. <nobr><code class="javascript">{a: "foo", b: "bar"}</code></nobr> translates to <code class="javascript"><span class="string">'?a=foo&amp;b=bar'</span></code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>template</b>(
			<nobr>&lt;String&gt; <i>str</i>, &lt;Object&gt; <i>data</i> )</nobr>
		</code></td>

		<td><code class="javascript">String</code></td>
		<td>Simple templating facility, creates a string by applying the values of the <code class="javascript">data</code> object of a form <code class="javascript">{a: 'foo', b: 'bar', …}</code> to a template string of the form <code class="javascript"><span class="string">'Hello {a}, {b}'</span></code> — in this example you will get <code class="javascript"><span class="string">'Hello foo, bar'</span></code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>isArray</b>(
			<nobr>&lt;Object&gt; <i>obj</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the given object is an array.</td>
	</tr>
</tbody></table>

<h3>Properties</h3>

<table>
	<tbody><tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>emptyImageUrl</b></code></td>
		<td><code class="javascript">String</code></td>
		<td>Data URI string containing a base64-encoded empty GIF image. Used as a hack to free memory from unused images on WebKit-powered mobile devices (by setting image <code class="javascript">src</code> to this string).</td>
	</tr>
</tbody></table>



<h2 id="transformation">L.Transformation</h2>

<p>Represents an affine transformation: a set of coefficients <code class="javascript">a</code>, <code class="javascript">b</code>, <code class="javascript">c</code>, <code class="javascript">d</code> for transforming a point of a form <code class="javascript">(x, y)</code> into <code class="javascript">(a*x + b, c*y + d)</code> and doing the reverse. Used by Leaflet in its projections code.</p>

<pre><code class="javascript"><span class="keyword">var</span> transformation = <span class="keyword">new</span> L.Transformation(<span class="number">2</span>, <span class="number">5</span>, -<span class="number">1</span>, <span class="number">10</span>),
    p = <span class="keyword">new</span> L.Point(<span class="number">1</span>, <span class="number">2</span>),
    p2 = transformation.transform(p), <span class="comment">// new L.Point(7, 8)</span>
    p3 = transformation.untransform(p2); <span class="comment">// new L.Point(1, 2)</span>
</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width250">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Transformation</b>(
			<nobr>&lt;Number&gt; <i>a</i></nobr>,
			<nobr>&lt;Number&gt; <i>b</i></nobr>,
			<nobr>&lt;Number&gt; <i>c</i></nobr>,
			<nobr>&lt;Number&gt; <i>d</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Transformation(<span class="comment">…</span>)</code><br>
			<!--<code>L.point(<span class="comment">&hellip;</span>)</code><br />
			<code>L.point([<span class="comment">&hellip;</span>])</code>-->
		</td>

		<td>Creates a transformation object with the given coefficients.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>transform</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i></nobr>,
			<nobr>&lt;Number&gt; <i>scale?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns a transformed point, optionally multiplied by the given scale. Only accepts real <code class="javascript">L.Point</code> instances, not arrays.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>untransform</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i></nobr>,
			<nobr>&lt;Number&gt; <i>scale?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Returns the reverse transformation of the given point, optionally divided by the given scale. Only accepts real <code class="javascript">L.Point</code> instances, not arrays.</td>
	</tr>
</tbody></table>




<h2 id="lineutil">L.LineUtil</h2>

<p>Various utility functions for polyine points processing, used by Leaflet internally to make polylines lightning-fast.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>simplify</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>[]&gt; <i>points</i></nobr>,
			<nobr>&lt;Number&gt; <i>tolerance</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a>[]</code></td>

		<td>Dramatically reduces the number of points in a polyline while retaining its shape and returns a new array of simplified points. Used for a huge performance boost when processing/displaying Leaflet polylines for each zoom level and also reducing visual noise. <code class="javascript">tolerance</code> affects the amount of simplification (lesser value means higher quality but slower and with more points). Also released as a separated micro-library <a href="http://mourner.github.com/simplify-js/">Simplify.js</a>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>pointToSegmentDistance</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>p</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>p1</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>p2</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>

		<td>Returns the distance between point <code class="javascript">p</code> and segment <code class="javascript">p1</code> to <code class="javascript">p2</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>closestPointOnSegment</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>p</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>p1</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>p2</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>

		<td>Returns the closest point from a point <code class="javascript">p</code> on a segment <code class="javascript">p1</code> to <code class="javascript">p2</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>clipSegment</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>a</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>b</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#bounds">Bounds</a>&gt; <i>bounds</i> )</nobr>
		</code></td>

		<td><code class="javascript">-</code></td>

		<td>Clips the segment <code class="javascript">a</code> to <code class="javascript">b</code> by rectangular bounds (modifying the segment points directly!). Used by Leaflet to only show polyline points that are on the screen or near, increasing performance.</td>
	</tr>
</tbody></table>



<h2 id="polyutil">L.PolyUtil</h2>

<p>Various utility functions for polygon geometries.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>clipPolygon</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>[]&gt; <i>points</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#bounds">Bounds</a>&gt; <i>bounds</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a>[]</code></td>

		<td>Clips the polygon geometry defined by the given points by rectangular bounds. Used by Leaflet to only show polygon points that are on the screen or near, increasing performance. Note that polygon points needs different algorithm for clipping than polyline, so there's a seperate method for it.</td>
	</tr>
</tbody></table>




<h2 id="domevent">L.DomEvent</h2>

<p>Utility functions to work with the DOM events, used by Leaflet internally.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>addListener</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;String&gt; <i>type</i></nobr>,
			<nobr>&lt;Function&gt; <i>fn</i></nobr>,
			<nobr>&lt;Object&gt; <i>context?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds a listener <code class="javascript">fn</code> to the element's DOM event of the specified type. <code class="javascript"><span class="keyword">this</span></code> keyword inside the listener will point to <code class="javascript">context</code>, or to the element if not specified.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeListener</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;String&gt; <i>type</i></nobr>,
			<nobr>&lt;Function&gt; <i>fn</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Removes an event listener from the element.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>stopPropagation</b>(
			<nobr>&lt;DOMEvent&gt; <i>e</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Stop the given event from propagation to parent elements. Used inside the listener functions:
<pre><code class="javascript">L.DomEvent.addListener(div, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> {</span>
    L.DomEvent.stopPropagation(e);
});</code></pre>
		</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>preventDefault</b>(
			<nobr>&lt;DOMEvent&gt; <i>e</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Prevents the default action of the event from happening (such as following a link in the <code class="javascript">href</code> of the <code class="javascript">a</code> element, or doing a <code class="javascript">POST</code> request with page reload when <code class="javascript">form</code> is submitted). Use it inside listener functions.
		</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>stop</b>(
			<nobr>&lt;DOMEvent&gt; <i>e</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Does <code class="javascript">stopPropagation</code> and <code class="javascript">preventDefault</code> at the same time.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>disableClickPropagation</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Adds <code class="javascript">stopPropagation</code> to the element's <code class="javascript"><span class="string">'click'</span></code>, <code class="javascript"><span class="string">'doubleclick'</span></code>, <code class="javascript"><span class="string">'mousedown'</span></code> and <code class="javascript"><span class="string">'touchstart'</span></code> events.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getMousePosition</b>(
			<nobr>&lt;DOMEvent&gt; <i>e</i></nobr>,
			<nobr>&lt;HTMLElement&gt; <i>container?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Gets normalized mouse position from a DOM event relative to the container or to the whole page if not specified.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getWheelDelta</b>(
			<nobr>&lt;DOMEvent&gt; <i>e</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>
		<td>Gets normalized wheel delta from a <code class="javascript">mousewheel</code> DOM event.</td>
	</tr>
</tbody></table>




<h2 id="domutil">L.DomUtil</h2>

<p>Utility functions to work with the DOM tree, used by Leaflet internally.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>get</b>(
			<nobr>&lt;String or HTMLElement&gt; <i>id</i> )</nobr>
		</code></td>

		<td><code class="javascript">HTMLElement</code></td>
		<td>Returns an element with the given id if a string was passed, or just returns the element if it was passed directly.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getStyle</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;String&gt; <i>style</i> )</nobr>
		</code></td>

		<td><code class="javascript">String</code></td>
		<td>Returns the value for a certain style attribute on an element, including computed values or values set through CSS.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getViewportOffset</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i> )</nobr>
		</code></td>

		<td><a href="http://leafletjs.com/reference.html#point"><code class="javascript">Point</code></a></td>
		<td>Returns the offset to the viewport for the requested element.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>create</b>(
			<nobr>&lt;String&gt; <i>tagName</i></nobr>,
			<nobr>&lt;String&gt; <i>className</i></nobr>,
			<nobr>&lt;HTMLElement&gt; <i>container?</i> )</nobr>
		</code></td>

		<td><code class="javascript">HTMLElement</code></td>

		<td>Creates an element with <code class="javascript">tagName</code>, sets the <code class="javascript">className</code>, and optionally appends it to <code class="javascript">container</code> element.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>disableTextSelection</b>()</code></td>
		<td>-</td>
		<td>Makes sure text cannot be selected, for example during dragging.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>enableTextSelection</b>()</code></td>
		<td>-</td>
		<td>Makes text selection possible again.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>hasClass</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;String&gt; <i>name</i> )</nobr>
		</code></td>

		<td><code class="javascript">Boolean</code></td>

		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the element class attribute contains <code class="javascript">name</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>addClass</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;String&gt; <i>name</i> )</nobr>
		</code></td>

		<td>-</td>

		<td>Adds <code class="javascript">name</code> to the element's class attribute.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>removeClass</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;String&gt; <i>name</i> )</nobr>
		</code></td>

		<td>-</td>

		<td>Removes <code class="javascript">name</code> from the element's class attribute.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setOpacity</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;Number&gt; <i>value</i> )</nobr>
		</code></td>

		<td>-</td>
		<td>Set the opacity of an element (including old IE support). Value must be from <code class="javascript">0</code> to <code class="javascript">1</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>testProp</b>(
			<nobr>&lt;String[]&gt; <i>props</i> )</nobr>
		</code></td>

		<td><code class="javascript">String</code> or <code class="javascript"><span class="literal">false</span></code></td>
		<td>Goes through the array of style names and returns the first name that is a valid style name for an element. If no such name is found, it returns <code class="javascript"><span class="literal">false</span></code>. Useful for vendor-prefixed styles like <code class="javascript">transform</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getTranslateString</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript">String</code></td>
		<td>Returns a CSS transform string to move an element by the offset provided in the given point. Uses 3D translate on WebKit for hardware-accelerated transforms and 2D on other browsers.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getScaleString</b>(
			<nobr>&lt;Number&gt; <i>scale</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>origin</i> )</nobr>
		</code></td>

		<td><code class="javascript">String</code></td>
		<td>Returns a CSS transform string to scale an element (with the given scale origin).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>setPosition</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i></nobr>,
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i></nobr>,
			<nobr>&lt;Boolean&gt; <i>disable3D?</i> )</nobr>
		</code></td>

		<td>-</td>
		<td>Sets the position of an element to coordinates specified by <code class="javascript">point</code>, using CSS translate or top/left positioning depending on the browser (used by Leaflet internally to position its layers). Forces top/left positioning if <code class="javascript">disable3D</code> is <code class="javascript"><span class="literal">true</span></code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>getPosition</b>(
			<nobr>&lt;HTMLElement&gt; <i>el</i> )</nobr>
		</code></td>

		<td><a href="http://leafletjs.com/reference.html#point">Point</a></td>
		<td>Returns the coordinates of an element previously positioned with <code class="javascript">setPosition</code>.</td>
	</tr>
</tbody></table>

<h3>Properties</h3>

<table>
	<tbody><tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>TRANSITION</b>
		</code></td>
		<td><code class="javascript">String</code></td>
		<td>Vendor-prefixed transition style name (e.g. <code class="javascript"><span class="string">'webkitTransition'</span></code> for WebKit).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>TRANSFORM</b>
		</code></td>
		<td><code class="javascript">String</code></td>
		<td>Vendor-prefixed transform style name.</td>
	</tr>
</tbody></table>



<h2 id="posanimation">L.PosAnimation</h2>

<p>Used internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9.</p>

<pre><code class="javascript"><span class="keyword">var</span> fx = <span class="keyword">new</span> L.PosAnimation();
fx.run(el, [<span class="number">300</span>, <span class="number">500</span>], <span class="number">0.5</span>);</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.PosAnimation</b>()</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.PosAnimation()</code>
		</td>

		<td>Creates a PosAnimation object.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>run</b>(
			<nobr>&lt;HTMLElement&gt; <i>element</i>,</nobr>
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>newPos</i></nobr>,
			<nobr>&lt;Number&gt; <i>duration?</i></nobr>,
			<nobr>&lt;Number&gt; <i>easeLinearity?</i> )</nobr>
		</code></td>

		<td><code class="javascript"><span class="keyword">this</span></code></td>
		<td>Run an animation of a given element to a new position, optionally setting duration in seconds (<code class="javascript"><span class="number">0.25</span></code> by default) and easing linearity factor (3rd argument of the <a href="http://cubic-bezier.com/#0,0,.5,1">cubic bezier curve</a>, <code class="javascript"><span class="number">0.5</span></code> by default)</td>
	</tr>
</tbody></table>

<h3>Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>start</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the animation starts.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>step</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired continuously during the animation.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>end</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the animation ends.</td>
	</tr>
</tbody></table>



<h2 id="draggable">L.Draggable</h2>

<p>A class for making DOM elements draggable (including touch support). Used internally for map and marker dragging.</p>

<pre><code class="javascript"><span class="keyword">var</span> draggable = <span class="keyword">new</span> L.Draggable(elementToDrag);
draggable.enable();
</code></pre>

<h3>Constructor</h3>

<table>
	<tbody><tr>
		<th class="width200">Constructor</th>
		<th>Usage</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Draggable</b>(
			<nobr>&lt;HTMLElement&gt; <i>element</i>,</nobr>
			<nobr>&lt;HTMLElement&gt; <i>dragHandle?</i> )</nobr>
		</code></td>

		<td class="factory-usage">
			<code class="factory-usage"><span class="keyword">new</span> L.Draggable(<span class="comment">…</span>)</code><!--<br />
			<code>L.draggable(<span class="comment">&hellip;</span>)</code>-->
		</td>

		<td>Creates a Draggable object for moving the given element when you start dragging the <code class="javascript">dragHandle</code> element (equals the element itself by default).</td>
	</tr>
</tbody></table>

<h3>Events</h3>

<p>You can subscribe to the following events using <a href="http://leafletjs.com/reference.html#events">these methods</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Event</th>
		<th class="width100">Data</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragstart</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the dragging starts.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>predrag</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired continuously during dragging <em>before</em> each corresponding update of the element position.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>drag</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired continuously during dragging.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>dragend</b></code></td>
		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#event">Event</a></code>
		</td><td>Fired when the dragging ends.</td>
	</tr>
</tbody></table>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th class="width100">Method</th>
		<th class="width100">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>enable</b>()</code></td>
		<td><code class="javascript">-</code></td>
		<td>Enables the dragging ability.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>disable</b>()</code></td>
		<td><code class="javascript">-</code></td>
		<td>Disables the dragging ability.</td>
	</tr>
</tbody></table>

<!--<h3>Static Properties</h3>

<table>
	<tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code><b>START</b></code></td>
		<td><code>String</code></td>
		<td>Name of the DOM event that initiates dragging. <code><span class="string">'mousedown'</span></code> for desktop browsers, <code><span class="string">'touchstart'</span></code> for mobile devices.</td>
	</tr>
	<tr>
		<td><code><b>MOVE</b></code></td>
		<td><code>String</code></td>
		<td>Name of the DOM event for drag moving. <code><span class="string">'mousemove'</span></code> for desktop browsers, <code><span class="string">'touchmove'</span></code> for mobile devices.</td>
	</tr>
	<tr>
		<td><code><b>END</b></code></td>
		<td><code>String</code></td>
		<td>Name of the DOM event that ends dragging. <code><span class="string">'mouseup'</span></code> for desktop browsers, <code><span class="string">'touchend'</span></code> for mobile devices.</td>
	</tr>
</table>-->



<h2 id="ihandler">IHandler</h2>
<p>An interface implemented by <a href="http://leafletjs.com/reference.html#map-interaction-handlers">interaction handlers</a>.</p>

<table>
	<tbody><tr>
		<th class="width100">Method</th>
		<th class="width100">Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>enable</b>()</code></td>
		<td>-</td>
		<td>Enables the handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>disable</b>()</code></td>
		<td>-</td>
		<td>Disables the handler.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>enabled</b>()</code></td>
		<td><code class="javascript">Boolean</code></td>
		<td>Returns <code class="javascript"><span class="literal">true</span></code> if the handler is enabled.</td>
	</tr>
</tbody></table>


<h2 id="ilayer">ILayer</h2>

<p>Represents an object attached to a particular location (or a set of locations) on a map. Implemented by <a href="http://leafletjs.com/reference.html#tilelayer">tile layers</a>, <a href="http://leafletjs.com/reference.html#marker">markers</a>, <a href="http://leafletjs.com/reference.html#popup">popups</a>, <a href="http://leafletjs.com/reference.html#imageoverlay">image overlays</a>, <a href="http://leafletjs.com/reference.html#path">vector layers</a> and <a href="http://leafletjs.com/reference.html#layergroup">layer groups</a>.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>onAdd</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td>-</td>
		<td>Should contain code that creates DOM elements for the overlay, adds them to <a href="http://leafletjs.com/reference.html#map-panes">map panes</a> where they should belong and puts listeners on relevant map events. Called on <code class="javascript">map.addLayer(layer)</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>onRemove</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td>-</td>
		<td>Should contain all clean up code that removes the overlay's elements from the DOM and removes listeners previously added in <code class="javascript">onAdd</code>. Called on <code class="javascript">map.removeLayer(layer)</code>.</td>
	</tr>
</tbody></table>

<h3>Implementing Custom Layers</h3>

<p>The most important things know about when implementing custom layers are Map <a href="http://leafletjs.com/reference.html#map-viewreset">viewreset</a> event and <a href="http://leafletjs.com/reference.html#map-latlngtolayerpoint">latLngToLayerPoint</a> method. <code class="javascript">viewreset</code> is fired when the map needs to reposition its layers (e.g. on zoom), and <code class="javascript">latLngToLayerPoint</code> is used to get coordinates for the layer's new position.</p>

<p>Another event often used in layer implementations is <a href="http://leafletjs.com/reference.html#map-moveend">moveend</a> which fires after any movement of the map (panning, zooming, etc.).</p>

<p>Another thing to note is that you'll usually need to add <code class="javascript">leaflet-zoom-hide</code> class to the DOM elements you create for the layer so that it hides during zoom animation. Implementing zoom animation for custom layers is a complex topic and will be documented separately in future, but meanwhile you can take a look at how it's done for Leaflet layers (e.g. <code class="javascript">ImageOverlay</code>) in the source.</p>

<h3>Custom Layer Example</h3>

<p>Here's how a custom layer implementation usually looks:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyCustomLayer = L.Class.extend({

    initialize: <span class="function"><span class="keyword">function</span> <span class="params">(latlng)</span> {</span>
        <span class="comment">// save position of the layer or any options from the constructor</span>
        <span class="keyword">this</span>._latlng = latlng;
    },

    onAdd: <span class="function"><span class="keyword">function</span> <span class="params">(map)</span> {</span>
        <span class="keyword">this</span>._map = map;

        <span class="comment">// create a DOM element and put it into one of the map panes</span>
        <span class="keyword">this</span>._el = L.DomUtil.create(<span class="string">'div'</span>, <span class="string">'my-custom-layer leaflet-zoom-hide'</span>);
        map.getPanes().overlayPane.appendChild(<span class="keyword">this</span>._el);

        <span class="comment">// add a viewreset event listener for updating layer's position, do the latter</span>
        map.on(<span class="string">'viewreset'</span>, <span class="keyword">this</span>._reset, <span class="keyword">this</span>);
        <span class="keyword">this</span>._reset();
    },

    onRemove: <span class="function"><span class="keyword">function</span> <span class="params">(map)</span> {</span>
        <span class="comment">// remove layer's DOM elements and listeners</span>
        map.getPanes().overlayPane.removeChild(<span class="keyword">this</span>._el);
        map.off(<span class="string">'viewreset'</span>, <span class="keyword">this</span>._reset, <span class="keyword">this</span>);
    },

    _reset: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        <span class="comment">// update layer's position</span>
        <span class="keyword">var</span> pos = <span class="keyword">this</span>._map.latLngToLayerPoint(<span class="keyword">this</span>._latlng);
        L.DomUtil.setPosition(<span class="keyword">this</span>._el, pos);
    }
});

map.addLayer(<span class="keyword">new</span> MyCustomLayer(latlng));
</code></pre>



<h2 id="icontrol">IControl</h2>

<p>Represents a UI element in one of the corners of the map. Implemented by <a href="http://leafletjs.com/reference.html#control-zoom">zoom</a>, <a href="http://leafletjs.com/reference.html#control-attribution">attribution</a>, <a href="http://leafletjs.com/reference.html#control-scale">scale</a> and <a href="http://leafletjs.com/reference.html#control-layers">layers</a> controls.</p>

<h3>Methods</h3>

<p>Every control in Leaflet should extend from <a href="http://leafletjs.com/reference.html#control">Control</a> class and additionally have the following methods:</p>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>onAdd</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td><code class="javascript">HTMLElement</code></td>
		<td>Should contain code that creates all the neccessary DOM elements for the control, adds listeners on relevant map events, and returns the element containing the control. Called on <code class="javascript">map.addControl(control)</code> or <code class="javascript">control.addTo(map)</code>.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>onRemove</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#map">Map</a>&gt; <i>map</i> )</nobr>
		</code></td>

		<td>-</td>
		<td>Optional, should contain all clean up code (e.g. removes control's event listeners). Called on <code class="javascript">map.removeControl(control)</code> or <code class="javascript">control.removeFrom(map)</code>. The control's DOM container is removed automatically.</td>
	</tr>
</tbody></table>

<h3>Custom Control Example</h3>

<pre><code class="javascript"><span class="keyword">var</span> MyControl = L.Control.extend({
    options: {
        position: <span class="string">'topright'</span>
    },

    onAdd: <span class="function"><span class="keyword">function</span> <span class="params">(map)</span> {</span>
        <span class="comment">// create the control container with a particular class name</span>
        <span class="keyword">var</span> container = L.DomUtil.create(<span class="string">'div'</span>, <span class="string">'my-custom-control'</span>);

        <span class="comment">// ... initialize other DOM elements, add listeners, etc.</span>

        <span class="keyword">return</span> container;
    }
});

map.addControl(<span class="keyword">new</span> MyControl());
</code></pre>

<p>If specify your own constructor for the control, you'll also probably want to process options properly:</p>

<pre><code class="javascript"><span class="keyword">var</span> MyControl = L.Control.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">(foo, options)</span> {</span>
        <span class="comment">// ...</span>
        L.Util.setOptions(<span class="keyword">this</span>, options);
    },
    <span class="comment">// ...</span>
});</code></pre>

<p>This will allow you to pass options like <code class="javascript">position</code> when creating the control instances:</p>

<pre><code class="javascript">map.addControl(<span class="keyword">new</span> MyControl(<span class="string">'bar'</span>, {position: <span class="string">'bottomleft'</span>}));</code></pre>




<h2 id="iprojection">IProjection</h2>

<p>An object with methods for projecting geographical coordinates of the world onto a flat surface (and back). See <a href="http://en.wikipedia.org/wiki/Map_projection">Map projection</a>.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>project</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Projects geographical coordinates into a 2D point.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>unproject</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>The inverse of <code class="javascript">project</code>. Projects a 2D point into geographical location.</td>
	</tr>
</tbody></table>

<h3>Defined Projections</h3>

<p>Leaflet comes with a set of already defined projections out of the box:</p>

<table>
	<tbody><tr>
		<th>Projection</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Projection.SphericalMercator</b></code></td>

		<td>Spherical Mercator projection — the most common projection for online maps, used by almost all free and commercial tile providers. Assumes that Earth is a sphere. Used by the <code class="javascript">EPSG:3857</code> CRS.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Projection.Mercator</b></code></td>

		<td>Elliptical Mercator projection — more complex than Spherical Mercator. Takes into account that Earth is a geoid, not a perfect sphere. Used by the <code class="javascript">EPSG:3395</code> CRS.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.Projection.LonLat</b></code></td>

		<td>Equirectangular, or Plate Carree projection — the most simple projection, mostly used by GIS enthusiasts. Directly maps <code class="javascript">x</code> as longitude, and <code class="javascript">y</code> as latitude. Also suitable for flat worlds, e.g. game maps. Used by the <code class="javascript">EPSG:3395</code> and <code class="javascript">Simple</code> CRS.</td>
	</tr>
</tbody></table>




<h2 id="icrs">ICRS</h2>

<p>Defines coordinate reference systems for projecting geographical points into pixel (screen) coordinates and back (and to coordinates in other units for WMS services). See <a href="http://en.wikipedia.org/wiki/Coordinate_reference_system">Spatial reference system</a>.</p>

<h3>Methods</h3>

<table>
	<tbody><tr>
		<th>Method</th>
		<th>Returns</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>latLngToPoint</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i></nobr>,
			<nobr>&lt;Number&gt; <i>zoom</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Projects geographical coordinates on a given zoom into pixel coordinates.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>pointToLatLng</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#point">Point</a>&gt; <i>point</i></nobr>,
			<nobr>&lt;Number&gt; <i>zoom</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#latlng">LatLng</a></code></td>
		<td>The inverse of <code class="javascript">latLngToPoint</code>. Projects pixel coordinates on a given zoom into geographical coordinates.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>project</b>(
			<nobr>&lt;<a href="http://leafletjs.com/reference.html#latlng">LatLng</a>&gt; <i>latlng</i> )</nobr>
		</code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#point">Point</a></code></td>
		<td>Projects geographical coordinates into coordinates in units accepted for this CRS (e.g. meters for <code class="javascript">EPSG:3857</code>, for passing it to WMS services).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>scale</b>(
			<nobr>&lt;Number&gt; <i>zoom</i> )</nobr>
		</code></td>

		<td><code class="javascript">Number</code></td>
		<td>Returns the scale used when transforming projected coordinates into pixel coordinates for a particular zoom. For example, it returns <code class="javascript">256 * 2^zoom</code> for Mercator-based CRS.</td>
	</tr>
</tbody></table>

<h3>Properties</h3>

<table>
	<tbody><tr>
		<th>Property</th>
		<th>Type</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>projection</b></code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#iprojection">IProjection</a></code></td>
		<td>Projection that this CRS uses.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>transformation</b></code></td>

		<td><code class="javascript"><a href="http://leafletjs.com/reference.html#transformation">Transformation</a></code></td>
		<td>Transformation that this CRS uses to turn projected coordinates into screen coordinates for a particular tile service.</td>
	</tr>

	<tr>
		<td><code class="javascript"><b>code</b></code></td>

		<td><code class="javascript">String</code></td>
		<td>Standard code name of the CRS passed into WMS services (e.g. <code class="javascript"><span class="string">'EPSG:3857'</span></code>).</td>
	</tr>
</tbody></table>

<h3>Defined CRS</h3>

<p>Leaflet comes with a set of already defined CRS to use out of the box:</p>

<table>
	<tbody><tr>
		<th>Projection</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.CRS.EPSG3857</b></code></td>

		<td>The most common CRS for online maps, used by almost all free and commercial tile providers. Uses Spherical Mercator projection. Set in by default in Map's <code class="javascript">crs</code> option.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.CRS.EPSG4326</b></code></td>

		<td>A common CRS among GIS enthusiasts. Uses simple Equirectangular projection.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.CRS.EPSG3395</b></code></td>

		<td>Rarely used by some commercial tile providers. Uses Elliptical Mercator projection.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L.CRS.Simple</b></code></td>

		<td>A simple CRS that maps longitude and latitude into <code class="javascript">x</code> and <code class="javascript">y</code> directly. May be used for maps of flat surfaces (e.g. game maps). Note that the <code class="javascript">y</code> axis should still be inverted (going from bottom to top).</td>
	</tr>
</tbody></table>

<p>If you want to use some obscure CRS not listed here, take a look at the <a href="https://github.com/kartena/Proj4Leaflet">Proj4Leaflet</a> plugin.</p>


<h2 id="global">Global Switches</h2>

<p>Global switches are created for rare cases and generally make Leaflet to not detect a particular browser feature even if it's there. You need to set the switch as a global variable to <code class="javascript"><span class="literal">true</span></code> <em>before</em> including Leaflet on the page, like this:</p>

<pre><code class="xml"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">L_PREFER_CANVAS = <span class="literal">true</span>;</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"leaflet.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></code></pre>

<table>
	<tbody><tr>
		<th>Switch</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><code class="javascript"><b>L_PREFER_CANVAS</b></code></td>
		<td>Forces Leaflet to use the Canvas back-end (if available) for vector layers instead of SVG. This can increase performance considerably in some cases (e.g. many thousands of circle markers on the map).</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L_NO_TOUCH</b></code></td>
		<td>Forces Leaflet to not use touch events even if it detects them.</td>
	</tr>
	<tr>
		<td><code class="javascript"><b>L_DISABLE_3D</b></code></td>
		<td>Forces Leaflet to not use hardware-accelerated CSS 3D transforms for positioning (which may cause glitches in some rare environments) even if they're supported.</td>
	</tr>
</tbody></table>

<h2 id="noconflict">L.noConflict()</h2>

<p>This method restores the L global variale to the original value it had before Leaflet inclusion, and returns the real Leaflet namespace so you can put it elsewhere, like this:</p><p>

</p><pre><code class="javascript"><span class="comment">// L points to some other library</span>
...
<span class="comment">// you include Leaflet, it replaces the L variable to Leaflet namespace</span>

<span class="keyword">var</span> Leaflet = L.noConflict();
<span class="comment">// now L points to that other library again, and you can use Leaflet.Map etc.</span></code></pre>


<h2 id="version">L.version</h2>

<p>A constant that represents the Leaflet version in use.</p><p>

</p><pre><code class="javascript">L.version <span class="comment">// returns "0.5" (or whatever version is currently in use)</span></code></pre>


		<div class="footer">
			<hr>
			<p class="quiet">© 2010–2013 <a href="http://agafonkin.com/en">Vladimir Agafonkin</a>, 2010–2011 <a href="http://cloudmade.com/">CloudMade</a>. Maps © <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors.</p>
		</div>
	</div>

	<a href="http://github.com/Leaflet/Leaflet"><img id="forkme" src="./Documentation - Leaflet_files/forkme_right_darkblue_121621.png" alt="Fork me on GitHub"></a>

	<script>
		hljs.tabReplace = '    ';

		(function () {
			var codes = document.getElementsByTagName('code'),
				parentClass;

			for (var i = 0, len = codes.length; i < len; i++) {
				if (!codes[i].className) {
					parentClass = codes[i].parentNode.className;
					if (parentClass) {
						codes[i].className = parentClass;
					} else if (codes[i].innerHTML.match(/^\s*&lt;/)) {
						codes[i].className = 'xml';
					} else {
						codes[i].className = 'javascript';
					}
				}
			}
		})();

		(function () {
			var headers = document.getElementsByTagName('h2');

			for (var i = 0, len = headers.length; i < len; i++) {
				if (headers[i].id) {
					headers[i].onclick = function() {
						window.location.hash = '#' + this.id;
					};
				}
			}
		})();

		hljs.initHighlighting();
	</script>

	<script>
		var _gaq = _gaq || [];
		_gaq.push([ '_setAccount', 'UA-4147697-4' ]);
		_gaq.push([ '_trackPageview' ]);

		(function() {
			var ga = document.createElement('script');
			ga.type = 'text/javascript';
			ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl'
					: 'http://www')
					+ '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0];
			s.parentNode.insertBefore(ga, s);
		})();
	</script>

	<script>
		var uvOptions = {};
		(function() {
			var uv = document.createElement('script'); uv.type = 'text/javascript'; uv.async = true;
			uv.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'widget.uservoice.com/ygv5CFpu3yBQFTFPOAdFg.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(uv, s);
		})();
	</script>


</body></html>